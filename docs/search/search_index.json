{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"Static Web Server      A cross-platform, high-performance &amp; asynchronous web server for static files serving    <p>v1.x End of Life (2023-01-06)</p> <p>The <code>v1.19.4</code> was the last version of the 1.x series and will be no longer supported. So we encourage users to migrate to v2 which has similar and additional features as well as significant performance and security improvements. Follow the v2 migration steps.</p>"},{"location":"#overview","title":"Overview","text":"<p>Static Web Server (or <code>SWS</code> abbreviated) is a tiny and fast production-ready web server suitable to serve static web files or assets.</p> <p>It is focused on lightness and easy-to-use principles while keeping high performance and safety powered by The Rust Programming Language.</p> <p>Written on top of Hyper and Tokio runtime, it provides concurrent and asynchronous networking abilities and the latest HTTP/1 - HTTP/2 implementations.</p> <p>Cross-platform and available for <code>Linux</code>, <code>macOS</code>, <code>Windows</code>, <code>FreeBSD</code>, <code>NetBSD</code>, <code>Android</code>, <code>Docker</code> and <code>Wasm</code> (via Wasmer).</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Built with Rust, which focuses on safety, speed and concurrency.</li> <li>Memory-safe and significantly reduced CPU and RAM overhead.</li> <li>Blazing fast static files-serving and asynchronous powered by the latest Hyper, Tokio and a set of awesome crates.</li> <li>Single 4MB (uncompressed) and fully static binary with no dependencies (Musl libc). Suitable for running on any Linux distro or Docker container.</li> <li>Optional GZip, Deflate, Brotli or Zstandard (zstd) compression for text-based web files only.</li> <li>Compression on-demand via Accept-Encoding header.</li> <li>Partial Content Delivery support for byte-serving of large files.</li> <li>Optional Cache-Control headers for assets.</li> <li>Termination signal handling with graceful shutdown ability and grace period.</li> <li>HTTP/2 and TLS support.</li> <li>Security headers for HTTP/2 by default.</li> <li>HEAD and OPTIONS responses.</li> <li>Lightweight and configurable logging via tracing crate.</li> <li>Customizable number of blocking and worker threads.</li> <li>Optional directory listing with sorting and JSON output format support.</li> <li>CORS with preflight requests support.</li> <li>Basic HTTP Authentication.</li> <li>Customizable HTTP response headers for specific file requests via glob patterns.</li> <li>Fallback pages for 404 errors, useful for Single-page applications.</li> <li>Run the server as a Windows Service.</li> <li>Configurable using CLI arguments, environment variables or a TOML file.</li> <li>Default and custom error pages.</li> <li>Built-in HTTP to HTTPS redirect.</li> <li>GET/HEAD Health check endpoint.</li> <li>Support for serving pre-compressed (Gzip/Brotli/Zstd) files directly from disk.</li> <li>Custom URL rewrites and redirects via glob patterns with replacements.</li> <li>Virtual hosting support.</li> <li>Multiple index files.</li> <li>Maintenance Mode functionality.</li> <li>Available as a library crate with opt-in features.</li> <li>First-class Docker support. Scratch, latest Alpine Linux and Debian Docker images.</li> <li>Ability to accept a socket listener as a file descriptor for sandboxing and on-demand applications (e.g. systemd).</li> <li>Cross-platform. Pre-compiled binaries for Linux, macOS, Windows, FreeBSD, NetBSD, Android (<code>x86/x86_64</code>, <code>ARM/ARM64</code>) and WebAssembly (via Wasmer).</li> </ul>"},{"location":"#benchmarks","title":"Benchmarks","text":"<p>For more details see the benchmarks repository.</p> <p>For feedback or questions feel free to reach us on the discussions page.</p>"},{"location":"#community","title":"Community","text":"<p>SWS Community on Discord</p>"},{"location":"building-from-source/","title":"Building from Source","text":"<p>Follow these instructions to either build <code>SWS</code> project from the source or the HTML documentation.</p>"},{"location":"building-from-source/#building-project-from-source","title":"Building project from source","text":"<p>If you want to build SWS from the source, all you need is a Rust 2021 Edition installed.</p> <p>So make sure to install Rust 1.76.0 or newer (or nightly) along with the toolchain(s) of your preference.</p> <p>Then clone the repository and use Cargo to build the project from the source.</p> <pre><code>git clone https://github.com/static-web-server/static-web-server.git\ncd static-web-server\ncargo build --release\n</code></pre> <p>Finally, the release binary should be available at <code>target/https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.htmlrelease/static-web-server</code> or under your toolchain directory chosen.</p> <p>Don't use the project's <code>Makefile</code></p> <p>Please don't use the project's <code>Makefile</code> since it's only intended for development and some on-demand tasks.</p>"},{"location":"building-from-source/#cargo-features","title":"Cargo features","text":"<p>When building from the source, all features are enabled by default. However, you can disable just the ones you don't need from the lists below.</p> Feature Description Default <code>default</code> Activates the default features by omission. <code>all</code> Activates all available features including the <code>experimental</code> feature. This is the default feature used when building SWS binaries. <code>experimental</code> Activates all SWS experimental features. Make sure to also provide the required <code>RUSTFLAGS</code> if the feature requires so. HTTP2/TLS <code>http2</code> Activates the HTTP2 and TLS feature. Compression <code>compression</code> Activates auto-compression and compression static with all supported algorithms. <code>compression-brotli</code> Activates auto-compression/compression static with only the <code>brotli</code> algorithm. <code>compression-deflate</code> Activates auto-compression/compression static with only the <code>deflate</code> algorithm. <code>compression-gzip</code> Activates auto-compression/compression static with only the <code>gzip</code> algorithm. <code>compression-zstd</code> Activates auto-compression/compression static with only the <code>zstd</code> algorithm. Directory Listing <code>directory-listing</code> Activates the directory listing feature. Basic Authorization <code>basic-auth</code> Activates the Basic HTTP Authorization Schema feature. Fallback Page <code>fallback-page</code> Activates the Fallback Page feature."},{"location":"building-from-source/#disable-all-default-features","title":"Disable all default features","text":"<p>For example, if you want to run or build SWS without the default features like <code>compression</code>, <code>http2</code>, etc then just try:</p> <pre><code># run\ncargo run --no-default-features -- -h\n\n# build\ncargo build --release --no-default-features\n\n# or build including all features (example)\nRUSTFLAGS=\"--cfg tokio_unstable\" \\\n    cargo build -vv --release --features all \n</code></pre>"},{"location":"building-from-source/#cross-compiling","title":"Cross-compiling","text":"<p>If you want to cross-compile SWS then consider using Zig as linker for easier cross compiling.</p> <p>Let's say, you want to cross-compile SWS from macOS to Linux. Then follow these steps.</p> <ol> <li>Add the necessary toolchain, for example just type: <code>rustup target add x86_64-unknown-linux-gnu</code> or <code>rustup target add x86_64-unknown-linux-musl</code> if a statically-linked binary is wanted.</li> <li>Install the latest Zig version via <code>brew install zig</code></li> <li>Install cargo-zigbuild via <code>cargo install cargo-zigbuild</code></li> <li>Finally, build SWS as follows:     <pre><code># dynamically-linked binary\ncargo zigbuild --verbose --release --target=x86_64-unknown-linux-gnu\n# or statically-linked binary\ncargo zigbuild --verbose --release --target=x86_64-unknown-linux-musl\n</code></pre></li> </ol> <p>Built binaries can be found under the corresponding toolchain directory inside <code>target/</code>.</p>"},{"location":"building-from-source/#testing","title":"Testing","text":"<pre><code># run tests for default features\ncargo test\n\n# run all tests without default features\ncargo test --tests --no-default-features\n\n# or run tests for all features including experimental ones\nRUSTFLAGS=\"--cfg tokio_unstable\" cargo test --features all\n\n# or run specific tests\ncargo test --test rewrites\n</code></pre>"},{"location":"building-from-source/#building-documentation-from-source","title":"Building documentation from source","text":"<p>All HTML documentation is located in the <code>docs/</code> project's directory and is built using Material for MkDocs.</p> <p>It's only necessary to have Docker installed.</p>"},{"location":"building-from-source/#building-documentation","title":"Building documentation","text":"<p>By default the docs will be built in the <code>/tmp/docs</code> directory, to do so follow these steps.</p> <pre><code>git clone https://github.com/static-web-server/static-web-server.git\ncd static-web-server\nmkdir /tmp/docs\ndocker run -it --rm \\\n    -v $PWD/docs:/docs \\\n    -v /tmp/docs:/tmp/docs squidfunk/mkdocs-material build\n</code></pre> <p>Output the docs in a different directory</p> <p>If you want to output the docs in a different directory then append the <code>--site-dir=/new/dir/path/</code> argument to the \"squidfunk/mkdocs-material\" <code>build</code> command and make sure to provide the new directory path.</p>"},{"location":"building-from-source/#development-server","title":"Development server","text":"<p>If you want to improve the documentation then run the built-in development server via <code>docs/docker-compose.yml</code>.</p> <pre><code>git clone https://github.com/static-web-server/static-web-server.git\ncd static-web-server\ndocker-compose -f docs/docker-compose.yml up\n</code></pre> <p>Now the server will be available at <code>localhost:8000</code></p>"},{"location":"contributions/","title":"Contributions","text":"<p>Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in current work by you, as defined in the Apache License (Version 2.0) license, shall be dual licensed as described below, without any additional terms or conditions.</p> <p>Feel free to send some Pull request or file an issue.</p> <p>For feedback or questions feel free to reach us on the discussions page or join us on Discord Server.</p>"},{"location":"download-and-install/","title":"Download and Install","text":""},{"location":"download-and-install/#download-and-install","title":"Download and Install","text":"<p>Latest v2.36.0 release <code>2025-02-10</code> (changelog, sha256sum)</p> Linux 64-bit macOS 64-bit Windows 64-bit FreeBSD 64-bit <p>See also the release history on GitHub.</p> <p>Docker</p> <p>If you are working with Docker containers then check out the Docker feature page.</p>"},{"location":"download-and-install/#installation-methods","title":"Installation methods","text":""},{"location":"download-and-install/#binary-installer-linuxbsds","title":"Binary installer (Linux/BSDs)","text":"<p>Use the binary installer if your package manager is not supported.</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSfL https://get.static-web-server.net | sh\n</code></pre> <p><code>static-web-server</code> will be installed by default under the <code>/usr/local/bin</code> directory.</p> <p>Alternatively, you can install a specific version of SWS to a custom location by setting environment variables.</p> <pre><code>export SWS_INSTALL_VERSION=\"2.36.0\" # full list at https://github.com/static-web-server/static-web-server/tags\nexport SWS_INSTALL_DIR=\"~/.local/bin\"\ncurl --proto '=https' --tlsv1.2 -sSfL https://get.static-web-server.net | sh\n</code></pre> <p>Make sure you set the environment variables for the piped process (<code>sh</code> in our case), not the piping process (<code>curl</code>).</p> <p>If you don't want to <code>export</code> environment variables then use:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSfL https://get.static-web-server.net | SWS_INSTALL_DIR=\"~/.local/bin\" sh\n</code></pre>"},{"location":"download-and-install/#arch-linux","title":"Arch Linux","text":"<p>Via Yay or your favorite AUR Helper.</p> <pre><code>yay -S static-web-server-bin\n</code></pre>"},{"location":"download-and-install/#exherbo-linux","title":"Exherbo Linux","text":"<p>Add the <code>rust</code> repository and install the package through <code>cave</code>:</p> <pre><code>cave sync\ncave resolve -x repository/rust\ncave resolve -x static-web-server\n</code></pre>"},{"location":"download-and-install/#nixos","title":"NixOS","text":"<p>Via Nix (Linux/MacOS)</p> <pre><code>nix-shell -p static-web-server\n# or\nnix-env -iA nixpkgs.static-web-server\n</code></pre> <ul> <li>SWS Nix package maintained by @figsoda</li> <li>SWS Nix module maintained by @mac-chaffee</li> </ul>"},{"location":"download-and-install/#macos","title":"MacOS","text":"<p>Via Homebrew (also Linux)</p> <pre><code>brew tap static-web-server/static-web-server\n\n# Just the binary\nbrew install static-web-server-bin\n\n# Or build from source\nbrew install static-web-server\n</code></pre>"},{"location":"download-and-install/#windows","title":"Windows","text":"<p>Via Scoop</p> <pre><code>scoop install static-web-server\n</code></pre>"},{"location":"download-and-install/#webassembly","title":"WebAssembly","text":"<p>Via Wasmer</p> <pre><code>wasmer run wasmer/static-web-server --net --enable-threads --mapdir /public:/my/host/dir -- --port 8787\n</code></pre>"},{"location":"download-and-install/#binaries","title":"Binaries","text":"<p>Pre-compiled binaries grouped by CPU architectures.</p>"},{"location":"download-and-install/#x86_64","title":"x86_64","text":"<ul> <li>static-web-server-v2.36.0-x86_64-apple-darwin.tar.gz SHA256SUM: <code>83f5f35197ef9b35475019eba5cd44004f72cecccc61957f2045b26881790c9b</code></li> <li>static-web-server-v2.36.0-x86_64-pc-windows-gnu.zip SHA256SUM: <code>73992f047066aa39d6d28421429b05bbd877c428420a029e8cca5251fc4b1af7</code></li> <li>static-web-server-v2.36.0-x86_64-pc-windows-msvc.zip SHA256SUM: <code>2a0071fd3978bd5fbb09a154e0c1d09672cacd6f9356ebeb25e76bb4d7ee1af9</code></li> <li>static-web-server-v2.36.0-x86_64-unknown-freebsd.tar.gz SHA256SUM: <code>862741bb4490a2770325b5b08c475c92bf23c7a297c856ed2df2f9ec631d31e6</code></li> <li>static-web-server-v2.36.0-x86_64-unknown-linux-gnu.tar.gz SHA256SUM: <code>170d3b99e5f08c61e38caa8335e91fca0c0156c6f3fba1c00b3a2763e16dc7d4</code></li> <li>static-web-server-v2.36.0-x86_64-unknown-linux-musl.tar.gz SHA256SUM: <code>2c047e9e58a6c62a31a2a86f15e45543db1bac6c3e0781b656e39e321d94a618</code></li> <li>static-web-server-v2.36.0-x86_64-unknown-netbsd.tar.gz SHA256SUM: <code>6d16bd2fea21186e03e641e043acd49fea76d0993a2fee65c9f7153ecf8bccbf</code></li> <li>static-web-server-v2.36.0-x86_64-unknown-illumos.tar.gz SHA256SUM: <code>f45facda3d4164e3f6cd3be9b9b38633d5f36e30ecb3a8100c061e4af9ff26e3</code></li> </ul>"},{"location":"download-and-install/#arm64","title":"ARM64","text":"<ul> <li>static-web-server-v2.36.0-aarch64-unknown-linux-gnu.tar.gz SHA256SUM: <code>166fcac258a7d6bd644d427da005bde2212c57031c88a34526f25b859c3ef2a8</code></li> <li>static-web-server-v2.36.0-aarch64-unknown-linux-musl.tar.gz SHA256SUM: <code>c61e8ecad98309c8a82f101f6a2b43932bcc0fdddaa06231968bd17e56e9f488</code></li> <li>static-web-server-v2.36.0-aarch64-apple-darwin.tar.gz SHA256SUM: <code>4cb4170bb221edaea86fcdc67152aeb125764054b54da0f1afeec3cd7e737b5e</code></li> <li>static-web-server-v2.36.0-aarch64-linux-android.tar.gz SHA256SUM: <code>f77a638c606ea830fcd14685f27778deda1ffdc6a6e97058e51f9e77acb66833</code></li> <li>static-web-server-v2.36.0-aarch64-pc-windows-msvc.zip SHA256SUM: <code>db8440d04ab0a2e8a229197da5c61344bb4760b7f1add33ba21443e323b8b8f1</code></li> </ul>"},{"location":"download-and-install/#x86","title":"x86","text":"<ul> <li>static-web-server-v2.36.0-i686-pc-windows-msvc.zip SHA256SUM: <code>5cdd9933ebf7c1621744412a83263ecc5cd0fd6a15d75f3aeb12698e72bd7553</code></li> <li>static-web-server-v2.36.0-i686-unknown-freebsd.tar.gz SHA256SUM: <code>f84d9548f82a044fc4d7a07e341e79afb7c8b8bf5ad01ed4ce584c21493b569a</code></li> <li>static-web-server-v2.36.0-i686-unknown-linux-gnu.tar.gz SHA256SUM: <code>9dd732810c6ab9132d17683fac8927811f656c1b45917adfadfa7e96fdc5e89e</code></li> <li>static-web-server-v2.36.0-i686-unknown-linux-musl.tar.gz SHA256SUM: <code>7b5fe36b8ca2affc4c535ca3d2649ba5960b23be5f769005907c376dac504ae0</code></li> </ul>"},{"location":"download-and-install/#arm","title":"ARM","text":"<ul> <li>static-web-server-v2.36.0-arm-unknown-linux-gnueabihf.tar.gz SHA256SUM: <code>9ad5935882f4fdea5cd990ba4341662141e6ab22ed86f5df1700be43a3944d6d</code></li> <li>static-web-server-v2.36.0-arm-unknown-linux-musleabihf.tar.gz SHA256SUM: <code>260f17e12c7a23dbd191db596421e76caa1532d29dde0f6861c56b25e2c9f8da</code></li> <li>static-web-server-v2.36.0-armv7-unknown-linux-musleabihf.tar.gz SHA256SUM: <code>1066219a8dd30bfc9760b2ba4eeb381effeddc435feaa060f4d3d7f7785c9e5d</code></li> </ul>"},{"location":"download-and-install/#powerpc","title":"PowerPC","text":"<ul> <li>static-web-server-v2.36.0-powerpc64le-unknown-linux-gnu.tar.gz SHA256SUM: <code>0e0064c7317c549cec0efff824aa0f0f1900e0375777eac7a1ff64633200b542</code></li> </ul>"},{"location":"download-and-install/#s390x","title":"S390X","text":"<ul> <li>static-web-server-v2.36.0-s390x-unknown-linux-gnu.tar.gz SHA256SUM: <code>6e49ff4e2c1eed474212e68927ab26856d92a94ec8adfdceb25abf3dcbc32c67</code></li> </ul>"},{"location":"download-and-install/#source-files","title":"Source files","text":"<ul> <li>static-web-server-2.36.0.tar.gz SHA256SUM: <code>bb99fd25835050e9572ea4589f66b94a64d1724712a2f4881ab35f29d1d8f2a9</code></li> <li>static-web-server-2.36.0.zip SHA256SUM: <code>c03d487ab8b925e482a43fd147106819b2f977ff19fe074ca61f91f2115ccdd4</code></li> </ul>"},{"location":"download-and-install.template/","title":"Download and Install","text":"<p>Latest {{RELEASE_VERSION}} release <code>{{RELEASE_DATE}}</code> (changelog, sha256sum)</p> Linux 64-bit macOS 64-bit Windows 64-bit FreeBSD 64-bit <p>See also the release history on GitHub.</p> <p>Docker</p> <p>If you are working with Docker containers then check out the Docker feature page.</p>"},{"location":"download-and-install.template/#installation-methods","title":"Installation methods","text":""},{"location":"download-and-install.template/#binary-installer-linuxbsds","title":"Binary installer (Linux/BSDs)","text":"<p>Use the binary installer if your package manager is not supported.</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSfL https://get.static-web-server.net | sh\n</code></pre> <p><code>static-web-server</code> will be installed by default under the <code>/usr/local/bin</code> directory.</p> <p>Alternatively, you can install a specific version of SWS to a custom location by setting environment variables.</p> <pre><code>export SWS_INSTALL_VERSION=\"{{RELEASE_VERSION_NUM}}\" # full list at https://github.com/static-web-server/static-web-server/tags\nexport SWS_INSTALL_DIR=\"~/.local/bin\"\ncurl --proto '=https' --tlsv1.2 -sSfL https://get.static-web-server.net | sh\n</code></pre> <p>Make sure you set the environment variables for the piped process (<code>sh</code> in our case), not the piping process (<code>curl</code>).</p> <p>If you don't want to <code>export</code> environment variables then use:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSfL https://get.static-web-server.net | SWS_INSTALL_DIR=\"~/.local/bin\" sh\n</code></pre>"},{"location":"download-and-install.template/#arch-linux","title":"Arch Linux","text":"<p>Via Yay or your favorite AUR Helper.</p> <pre><code>yay -S static-web-server-bin\n</code></pre>"},{"location":"download-and-install.template/#exherbo-linux","title":"Exherbo Linux","text":"<p>Add the <code>rust</code> repository and install the package through <code>cave</code>:</p> <pre><code>cave sync\ncave resolve -x repository/rust\ncave resolve -x static-web-server\n</code></pre>"},{"location":"download-and-install.template/#nixos","title":"NixOS","text":"<p>Via Nix (Linux/MacOS)</p> <pre><code>nix-shell -p static-web-server\n# or\nnix-env -iA nixpkgs.static-web-server\n</code></pre> <ul> <li>SWS Nix package maintained by @figsoda</li> <li>SWS Nix module maintained by @mac-chaffee</li> </ul>"},{"location":"download-and-install.template/#macos","title":"MacOS","text":"<p>Via Homebrew (also Linux)</p> <pre><code>brew tap static-web-server/static-web-server\n\n# Just the binary\nbrew install static-web-server-bin\n\n# Or build from source\nbrew install static-web-server\n</code></pre>"},{"location":"download-and-install.template/#windows","title":"Windows","text":"<p>Via Scoop</p> <pre><code>scoop install static-web-server\n</code></pre>"},{"location":"download-and-install.template/#webassembly","title":"WebAssembly","text":"<p>Via Wasmer</p> <pre><code>wasmer run wasmer/static-web-server --net --enable-threads --mapdir /public:/my/host/dir -- --port 8787\n</code></pre>"},{"location":"download-and-install.template/#binaries","title":"Binaries","text":"<p>Pre-compiled binaries grouped by CPU architectures.</p>"},{"location":"download-and-install.template/#x86_64","title":"x86_64","text":"<ul> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-apple-darwin.tar.gz SHA256SUM: <code>{{x86_64-apple-darwin.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-pc-windows-gnu.zip SHA256SUM: <code>{{x86_64-pc-windows-gnu.zip}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-pc-windows-msvc.zip SHA256SUM: <code>{{x86_64-pc-windows-msvc.zip}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-unknown-freebsd.tar.gz SHA256SUM: <code>{{x86_64-unknown-freebsd.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-unknown-linux-gnu.tar.gz SHA256SUM: <code>{{x86_64-unknown-linux-gnu.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-unknown-linux-musl.tar.gz SHA256SUM: <code>{{x86_64-unknown-linux-musl.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-unknown-netbsd.tar.gz SHA256SUM: <code>{{x86_64-unknown-netbsd.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-x86_64-unknown-illumos.tar.gz SHA256SUM: <code>{{x86_64-unknown-illumos.tar.gz}}</code></li> </ul>"},{"location":"download-and-install.template/#arm64","title":"ARM64","text":"<ul> <li>static-web-server-{{RELEASE_VERSION}}-aarch64-unknown-linux-gnu.tar.gz SHA256SUM: <code>{{aarch64-unknown-linux-gnu.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-aarch64-unknown-linux-musl.tar.gz SHA256SUM: <code>{{aarch64-unknown-linux-musl.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-aarch64-apple-darwin.tar.gz SHA256SUM: <code>{{aarch64-apple-darwin.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-aarch64-linux-android.tar.gz SHA256SUM: <code>{{aarch64-linux-android.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-aarch64-pc-windows-msvc.zip SHA256SUM: <code>{{aarch64-pc-windows-msvc.zip}}</code></li> </ul>"},{"location":"download-and-install.template/#x86","title":"x86","text":"<ul> <li>static-web-server-{{RELEASE_VERSION}}-i686-pc-windows-msvc.zip SHA256SUM: <code>{{i686-pc-windows-msvc.zip}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-i686-unknown-freebsd.tar.gz SHA256SUM: <code>{{i686-unknown-freebsd.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-i686-unknown-linux-gnu.tar.gz SHA256SUM: <code>{{i686-unknown-linux-gnu.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-i686-unknown-linux-musl.tar.gz SHA256SUM: <code>{{i686-unknown-linux-musl.tar.gz}}</code></li> </ul>"},{"location":"download-and-install.template/#arm","title":"ARM","text":"<ul> <li>static-web-server-{{RELEASE_VERSION}}-arm-unknown-linux-gnueabihf.tar.gz SHA256SUM: <code>{{arm-unknown-linux-gnueabihf.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-arm-unknown-linux-musleabihf.tar.gz SHA256SUM: <code>{{arm-unknown-linux-musleabihf.tar.gz}}</code></li> <li>static-web-server-{{RELEASE_VERSION}}-armv7-unknown-linux-musleabihf.tar.gz SHA256SUM: <code>{{armv7-unknown-linux-musleabihf.tar.gz}}</code></li> </ul>"},{"location":"download-and-install.template/#powerpc","title":"PowerPC","text":"<ul> <li>static-web-server-{{RELEASE_VERSION}}-powerpc64le-unknown-linux-gnu.tar.gz SHA256SUM: <code>{{powerpc64le-unknown-linux-gnu.tar.gz}}</code></li> </ul>"},{"location":"download-and-install.template/#s390x","title":"S390X","text":"<ul> <li>static-web-server-{{RELEASE_VERSION}}-s390x-unknown-linux-gnu.tar.gz SHA256SUM: <code>{{s390x-unknown-linux-gnu.tar.gz}}</code></li> </ul>"},{"location":"download-and-install.template/#source-files","title":"Source files","text":"<ul> <li>static-web-server-{{RELEASE_VERSION_NUM}}.tar.gz SHA256SUM: <code>{{SRC_TAR}}</code></li> <li>static-web-server-{{RELEASE_VERSION_NUM}}.zip SHA256SUM: <code>{{SRC_ZIP}}</code></li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Download and install the binary for your specific platform and then type</p> <pre><code>static-web-server --port 8787 --root ./my-public-dir\n</code></pre> <p>Or if you use Docker just try</p> <pre><code>docker run --rm -it -p 8787:80 joseluisq/static-web-server:2\n</code></pre> <p>Docker Tip</p> <p>You can specify a Docker volume like <code>-v $HOME/my-public-dir:/public</code> to overwrite the default root directory. See Docker examples.</p> <ul> <li>Type <code>static-web-server --help</code> or see the Command-line arguments section.</li> <li>See how to configure the server using a configuration file.</li> <li>Have a look at the features section for more advanced examples.</li> </ul>"},{"location":"license/","title":"License","text":"<p>This work is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0).</p> <p>\u00a9 2019-present Jose Quintana</p> <p>For feedback or questions feel free to reach us on the discussions page.</p>"},{"location":"migration/","title":"Migrating from v1 to v2","text":"<p>The <code>v2</code> introduces notable changes including new features, performance improvements and new target support like ARM64 and OSes like FreeBSD, NetBSD, Illumos or Android.</p> <p>This version <code>v2</code> was re-written almost from scratch on top of Hyper and Tokio runtime which gives us the Rust asynchronous ability by default and the latest HTTP/1 - HTTP/2 implementation improvements. However, it still tries to keep the same principles of its <code>v1</code>: lightness and easy-to-use. Therefore migration should not be a big deal.</p>"},{"location":"migration/#v2-breaking-changes","title":"v2 breaking changes","text":"<p>This major <code>v2</code> has a few breaking changes. However, migration should not represent a problem.</p> <p>Tip</p> <p>It is always worth recommending that you test a major server version upgrade like this first with your application(s) in a development environment or similar.</p> <p>Please keep in mind the following changes in <code>v2</code>:</p> <ul> <li>The server now supports only a root directory path (via <code>--root</code> or its equivalent env) so an assets path option is no longer required.</li> <li>Cache-control headers are arbitrarily applied to assets. See control headers examples for more details.</li> <li>OpenSSL TLS for HTTP/1 is no longer supported, instead for the HTTP/2 &amp; TLS (via <code>--http2</code> option) the server uses h2 which is on top of Rustls. It means that instead of using a <code>.p12</code> or <code>.pfx</code> file you can now use only a certificate file along with its private key. See HTTP/2 &amp; TLS examples for more details.</li> <li>If using HTTP to HTTPS redirect, then check out the new feature page to adjust the options accordingly.</li> </ul> <p>The rest of the known options are equivalent to <code>v1</code> (except the new ones of course).</p> <p>For feedback or questions feel free to reach us on the discussions page.</p>"},{"location":"platforms-architectures/","title":"Platforms &amp; Architectures","text":"<p>Currently, only the following platforms/architectures are supported.</p> <p>Docker tip</p> <p>For the list of Docker images supported see Docker OS/Arch page.</p>"},{"location":"platforms-architectures/#linux","title":"Linux","text":""},{"location":"platforms-architectures/#x86","title":"x86","text":"<ul> <li><code>i686-unknown-linux-gnu</code> </li> <li><code>i686-unknown-linux-musl</code></li> </ul>"},{"location":"platforms-architectures/#x86_64","title":"x86_64","text":"<ul> <li><code>x86_64-unknown-linux-gnu</code></li> <li><code>x86_64-unknown-linux-musl</code></li> </ul>"},{"location":"platforms-architectures/#arm","title":"ARM","text":"<ul> <li><code>arm-unknown-linux-gnueabihf</code> (armv6)</li> <li><code>arm-unknown-linux-musleabihf</code> (armv6)</li> <li><code>armv7-unknown-linux-musleabihf</code> (armv7)</li> </ul>"},{"location":"platforms-architectures/#arm64","title":"ARM64","text":"<ul> <li><code>aarch64-unknown-linux-musl</code></li> <li><code>aarch64-unknown-linux-gnu</code></li> <li><code>aarch64-linux-android</code></li> </ul>"},{"location":"platforms-architectures/#macos","title":"macOS","text":""},{"location":"platforms-architectures/#x86_65","title":"x86_64","text":"<ul> <li><code>x86_64-apple-darwin</code></li> </ul>"},{"location":"platforms-architectures/#arm64_1","title":"ARM64","text":"<ul> <li><code>aarch64-apple-darwin</code></li> </ul>"},{"location":"platforms-architectures/#windows","title":"Windows","text":""},{"location":"platforms-architectures/#x86_1","title":"x86","text":"<ul> <li><code>i686-pc-windows-msvc</code></li> </ul>"},{"location":"platforms-architectures/#x86_66","title":"x86_64","text":"<ul> <li><code>x86_64-pc-windows-msvc</code></li> <li><code>x86_64-pc-windows-gnu</code></li> </ul>"},{"location":"platforms-architectures/#arm64_2","title":"ARM64","text":"<ul> <li><code>aarch64-pc-windows-msvc</code></li> </ul>"},{"location":"platforms-architectures/#freebsd","title":"FreeBSD","text":""},{"location":"platforms-architectures/#x86_2","title":"x86","text":"<ul> <li><code>i686-unknown-freebsd</code></li> </ul>"},{"location":"platforms-architectures/#x86_67","title":"x86_64","text":"<ul> <li><code>x86_64-unknown-freebsd</code></li> </ul>"},{"location":"platforms-architectures/#netbsd","title":"NetBSD","text":""},{"location":"platforms-architectures/#x86_68","title":"x86_64","text":"<ul> <li><code>x86_64-unknown-netbsd</code></li> </ul>"},{"location":"platforms-architectures/#illumos","title":"Illumos","text":""},{"location":"platforms-architectures/#x86_69","title":"x86_64","text":"<ul> <li><code>x86_64-unknown-illumos</code></li> </ul>"},{"location":"platforms-architectures/#powerpc","title":"PowerPC","text":"<ul> <li><code>powerpc64le-unknown-linux-gnu</code></li> </ul>"},{"location":"platforms-architectures/#s390x","title":"S390X","text":"<ul> <li><code>s390x-unknown-linux-gnu</code></li> </ul>"},{"location":"report-security-issues/","title":"Report Security Issues","text":"<p>To report any security issues, please follow our Security Policy.</p>"},{"location":"semantic-versioning/","title":"Semantic Versioning","text":"<p><code>SWS</code> project adheres to Semantic Versioning (SemVer) for every release like the latest <code>v2</code>.</p> <p>The project privileges stability, security and performance, so you can rely on a major version like v2 and expect to get features (minor) and bug/security fixes (patch) without breaking changes.</p>"},{"location":"semantic-versioning/#breaking-changes-for-major-versions","title":"Breaking changes for major versions","text":"<p>Only switches between major versions \"could\" contain breaking changes or not depending on the particular case. However, this project tries to keep away from any kind of breaking change possible between major versions. But it still supports and prioritizes \"no breaking changes\" for minor and patch (bug fixes) versions.</p> <p>On the other hand, if a breaking change is found to be \"strictly necessary\" to do. Then a new major version must be promoted as well and users informed accordingly so they can do a seamless transition.</p>"},{"location":"configuration/command-line-arguments/","title":"Command-Line Arguments","text":"<p>The server can be configured via the following command-line arguments.</p> <p>Remember</p> <ul> <li>Command-line arguments are equivalent to their environment variables.</li> <li>Command-line arguments take precedence over their equivalent environment variables.</li> </ul> <pre><code>$ static-web-server -h\nA cross-platform, high-performance and asynchronous web server for static files-serving.\n\nUsage: static-web-server [OPTIONS] [COMMAND]\n\nCommands:\n  generate  Generate man pages and shell completions\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n  -a, --host &lt;HOST&gt;\n          Host address (E.g 127.0.0.1 or ::1) [env: SERVER_HOST=] [default: ::]\n  -p, --port &lt;PORT&gt;\n          Host port [env: SERVER_PORT=] [default: 80]\n  -f, --fd &lt;FD&gt;\n          Instead of binding to a TCP port, accept incoming connections to an already-bound TCP socket listener on the specified file descriptor number (usually zero). Requires that the parent process (e.g. inetd, launchd, or systemd) binds an address and port on behalf of static-web-server, before arranging for the resulting file descriptor to be inherited by static-web-server. Cannot be used in conjunction with the port and host arguments. The included systemd unit file utilises this feature to increase security by allowing the static-web-server to be sandboxed more completely [env: SERVER_LISTEN_FD=]\n  -n, --threads-multiplier &lt;THREADS_MULTIPLIER&gt;\n          Number of worker threads multiplier that'll be multiplied by the number of system CPUs using the formula: `worker threads = number of CPUs * n` where `n` is the value that changes here. When multiplier value is 0 or 1 then one thread per core is used. Number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side [env: SERVER_THREADS_MULTIPLIER=] [default: 1]\n  -b, --max-blocking-threads &lt;MAX_BLOCKING_THREADS&gt;\n          Maximum number of blocking threads [env: SERVER_MAX_BLOCKING_THREADS=] [default: 512]\n  -d, --root &lt;ROOT&gt;\n          Root directory path of static files [env: SERVER_ROOT=] [default: ./public]\n      --page50x &lt;PAGE50X&gt;\n          HTML file path for 50x errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. If a relative path is used then it will be resolved under the root directory [env: SERVER_ERROR_PAGE_50X=] [default: ./50x.html]\n      --page404 &lt;PAGE404&gt;\n          HTML file path for 404 errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. If a relative path is used then it will be resolved under the root directory [env: SERVER_ERROR_PAGE_404=] [default: ./404.html]\n      --page-fallback &lt;PAGE_FALLBACK&gt;\n          A HTML file path (not relative to the root) used for GET requests when the requested path doesn't exist. The fallback page is served with a 200 status code, useful when using client routers. If the path doesn't exist then the feature is not activated [env: SERVER_FALLBACK_PAGE=] [default: ]\n  -g, --log-level &lt;LOG_LEVEL&gt;\n          Specify a logging level in lower case. Values: error, warn, info, debug or trace [env: SERVER_LOG_LEVEL=] [default: error]\n  -c, --cors-allow-origins &lt;CORS_ALLOW_ORIGINS&gt;\n          Specify an optional CORS list of allowed origin hosts separated by commas. Host ports or protocols aren't being checked. Use an asterisk (*) to allow any host [env: SERVER_CORS_ALLOW_ORIGINS=] [default: ]\n  -j, --cors-allow-headers &lt;CORS_ALLOW_HEADERS&gt;\n          Specify an optional CORS list of allowed headers separated by commas. Default \"origin, content-type\". It requires `--cors-allow-origins` to be used along with [env: SERVER_CORS_ALLOW_HEADERS=] [default: \"origin, content-type, authorization\"]\n      --cors-expose-headers &lt;CORS_EXPOSE_HEADERS&gt;\n          Specify an optional CORS list of exposed headers separated by commas. Default \"origin, content-type\". It requires `--cors-expose-origins` to be used along with [env: SERVER_CORS_EXPOSE_HEADERS=] [default: \"origin, content-type\"]\n  -t, --http2 [&lt;HTTP2&gt;]\n          Enable HTTP/2 with TLS support [env: SERVER_HTTP2_TLS=] [default: false] [possible values: true, false]\n      --http2-tls-cert &lt;HTTP2_TLS_CERT&gt;\n          Specify the file path to read the certificate [env: SERVER_HTTP2_TLS_CERT=]\n      --http2-tls-key &lt;HTTP2_TLS_KEY&gt;\n          Specify the file path to read the private key [env: SERVER_HTTP2_TLS_KEY=]\n      --https-redirect [&lt;HTTPS_REDIRECT&gt;]\n          Redirect all requests with scheme \"http\" to \"https\" for the current server instance. It depends on \"http2\" to be enabled [env: SERVER_HTTPS_REDIRECT=] [default: false] [possible values: true, false]\n      --https-redirect-host &lt;HTTPS_REDIRECT_HOST&gt;\n          Canonical host name or IP of the HTTPS (HTTPS/2) server. It depends on \"https_redirect\" to be enabled [env: SERVER_HTTPS_REDIRECT_HOST=] [default: localhost]\n      --https-redirect-from-port &lt;HTTPS_REDIRECT_FROM_PORT&gt;\n          HTTP host port where the redirect server will listen for requests to redirect them to HTTPS. It depends on \"https_redirect\" to be enabled [env: SERVER_HTTPS_REDIRECT_FROM_PORT=] [default: 80]\n      --https-redirect-from-hosts &lt;HTTPS_REDIRECT_FROM_HOSTS&gt;\n          List of host names or IPs allowed to redirect from. HTTP requests must contain the HTTP 'Host' header and match against this list. It depends on \"https_redirect\" to be enabled [env: SERVER_HTTPS_REDIRECT_FROM_HOSTS=] [default: localhost]\n      --index-files &lt;INDEX_FILES&gt;\n          List of files that will be used as an index for requests ending with the slash character (\u2018/\u2019). Files are checked in the specified order [env: SERVER_INDEX_FILES=] [default: index.html]\n  -x, --compression [&lt;COMPRESSION&gt;]\n          Gzip, Deflate, Brotli or Zstd compression on demand determined by the Accept-Encoding header and applied to text-based web file types only [env: SERVER_COMPRESSION=] [default: true] [possible values: true, false]\n      --compression-level &lt;COMPRESSION_LEVEL&gt;\n          Compression level to apply for Gzip, Deflate, Brotli or Zstd compression [env: SERVER_COMPRESSION_LEVEL=] [default: default] [possible values: fastest, best, default]\n      --compression-static [&lt;COMPRESSION_STATIC&gt;]\n          Look up the pre-compressed file variant (`.gz`, `.br` or `.zst`) on disk of a requested file and serves it directly if available. The compression type is determined by the `Accept-Encoding` header [env: SERVER_COMPRESSION_STATIC=] [default: false] [possible values: true, false]\n  -z, --directory-listing [&lt;DIRECTORY_LISTING&gt;]\n          Enable directory listing for all requests ending with the slash character (\u2018/\u2019) [env: SERVER_DIRECTORY_LISTING=] [default: false] [possible values: true, false]\n      --directory-listing-order &lt;DIRECTORY_LISTING_ORDER&gt;\n          Specify a default code number to order directory listing entries per `Name`, `Last modified` or `Size` attributes (columns). Code numbers supported: 0 (Name asc), 1 (Name desc), 2 (Last modified asc), 3 (Last modified desc), 4 (Size asc), 5 (Size desc). Default 6 (unordered) [env: SERVER_DIRECTORY_LISTING_ORDER=] [default: 6]\n      --directory-listing-format &lt;DIRECTORY_LISTING_FORMAT&gt;\n          Specify a content format for directory listing entries. Formats supported: \"html\" or \"json\". Default \"html\" [env: SERVER_DIRECTORY_LISTING_FORMAT=] [default: html] [possible values: html, json]\n      --security-headers [&lt;SECURITY_HEADERS&gt;]\n          Enable security headers by default when HTTP/2 feature is activated. Headers included: \"Strict-Transport-Security: max-age=63072000; includeSubDomains; preload\" (2 years max-age), \"X-Frame-Options: DENY\" and \"Content-Security-Policy: frame-ancestors 'self'\" [env: SERVER_SECURITY_HEADERS=] [default: false] [possible values: true, false]\n  -e, --cache-control-headers [&lt;CACHE_CONTROL_HEADERS&gt;]\n          Enable cache control headers for incoming requests based on a set of file types. The file type list can be found on `src/control_headers.rs` file [env: SERVER_CACHE_CONTROL_HEADERS=] [default: true] [possible values: true, false]\n      --basic-auth &lt;BASIC_AUTH&gt;\n          It provides The \"Basic\" HTTP Authentication scheme using credentials as \"user-id:password\" pairs. Password must be encoded using the \"BCrypt\" password-hashing function [env: SERVER_BASIC_AUTH=] [default: ]\n  -q, --grace-period &lt;GRACE_PERIOD&gt;\n          Defines a grace period in seconds after a `SIGTERM` signal is caught which will delay the server before to shut it down gracefully. The maximum value is 255 seconds [env: SERVER_GRACE_PERIOD=] [default: 0]\n  -w, --config-file &lt;CONFIG_FILE&gt;\n          Server TOML configuration file path [env: SERVER_CONFIG_FILE=] [default: ./config.toml]\n      --log-remote-address [&lt;LOG_REMOTE_ADDRESS&gt;]\n          Log incoming requests information along with its remote address if available using the `info` log level [env: SERVER_LOG_REMOTE_ADDRESS=] [default: false] [possible values: true, false]\n      --log-x-real-ip [&lt;LOG_X_REAL_IP&gt;]\n          Log the X-Real-IP header for remote IP information [env: SERVER_LOG_X_REAL_IP=] [default: false] [possible values: true, false]\n      --log-forwarded-for [&lt;LOG_FORWARDED_FOR&gt;]\n          Log the X-Forwarded-For header for remote IP information [env: SERVER_LOG_FORWARDED_FOR=] [default: false] [possible values: true, false]\n      --trusted-proxies &lt;TRUSTED_PROXIES&gt;\n          List of IPs to use X-Forwarded-For from. The default is to trust all [env: SERVER_TRUSTED_PROXIES=]\n      --redirect-trailing-slash [&lt;REDIRECT_TRAILING_SLASH&gt;]\n          Check for a trailing slash in the requested directory URI and redirect permanently (308) to the same path with a trailing slash suffix if it is missing [env: SERVER_REDIRECT_TRAILING_SLASH=] [default: true] [possible values: true, false]\n      --ignore-hidden-files [&lt;IGNORE_HIDDEN_FILES&gt;]\n          Ignore hidden files/directories (dotfiles), preventing them to be served and being included in auto HTML index pages (directory listing) [env: SERVER_IGNORE_HIDDEN_FILES=] [default: false] [possible values: true, false]\n      --disable-symlinks [&lt;DISABLE_SYMLINKS&gt;]\n          Prevent following files or directories if any path name component is a symbolic link [env: SERVER_DISABLE_SYMLINKS=] [default: false] [possible values: true, false]\n      --health [&lt;HEALTH&gt;]\n          Add a /health endpoint that doesn't generate any log entry and returns a 200 status code. This is especially useful with Kubernetes liveness and readiness probes [env: SERVER_HEALTH=] [default: false] [possible values: true, false]\n      --maintenance-mode [&lt;MAINTENANCE_MODE&gt;]\n          Enable the server's maintenance mode functionality [env: SERVER_MAINTENANCE_MODE=] [default: false] [possible values: true, false]\n      --maintenance-mode-status &lt;MAINTENANCE_MODE_STATUS&gt;\n          Provide a custom HTTP status code when entering into maintenance mode. Default 503 [env: SERVER_MAINTENANCE_MODE_STATUS=] [default: 503]\n      --maintenance-mode-file &lt;MAINTENANCE_MODE_FILE&gt;\n          Provide a custom maintenance mode HTML file. If not provided then a generic message will be displayed [env: SERVER_MAINTENANCE_MODE_FILE=] [default: ]\n  -V, --version\n          Print version info and exit\n  -h, --help\n          Print help (see more with '--help')\n</code></pre>"},{"location":"configuration/command-line-arguments/#windows","title":"Windows","text":"<p>The following options and commands are Windows platform-specific.</p> <pre><code> -s, --windows-service &lt;windows-service&gt;\n            Run the web server as a Windows Service [env: SERVER_WINDOWS_SERVICE=]  [default: false]\n\nSUBCOMMANDS:\n    help         Prints this message or the help of the given subcommand(s)\n    install      Install a Windows Service for the web server\n    uninstall    Uninstall the current Windows Service\n</code></pre>"},{"location":"configuration/config-file/","title":"TOML Configuration File","text":"<p><code>SWS</code> can be configured using a TOML file to adjust the general server features as well as other advanced ones.</p> <p>It's disabled by default and can be enabled by passing a string file path via the <code>-w, --config-file</code> option or its equivalent SERVER_CONFIG_FILE env.</p> <p>The default config file path is checked at startup time</p> <p>If using the default config file path (<code>./config.toml</code>), SWS will attempt to load it at startup time. If it is not found or can not be loaded then SWS will continue using the server defaults.</p>"},{"location":"configuration/config-file/#toml-file-manifest","title":"TOML File (Manifest)","text":"<p>Below is just an example showing all features with their default values.</p> <pre><code>[general]\n\n#### Address &amp; Root dir\nhost = \"::\"\nport = 80\nroot = \"./public\"\n\n#### Logging\nlog-level = \"error\"\n\n#### Cache Control headers\ncache-control-headers = true\n\n#### Auto Compression\ncompression = true\ncompression-level = \"default\"\n\n#### Error pages\n# Note: If a relative path is used then it will be resolved under the root directory.\npage404 = \"./404.html\"\npage50x = \"./50x.html\"\n\n#### HTTP/2 + TLS\nhttp2 = false\nhttp2-tls-cert = \"\"\nhttp2-tls-key = \"\"\nhttps-redirect = false\nhttps-redirect-host = \"localhost\"\nhttps-redirect-from-port = 80\nhttps-redirect-from-hosts = \"localhost\"\n\n#### CORS &amp; Security headers\n# security-headers = true\n# cors-allow-origins = \"\"\n\n#### Directory listing\ndirectory-listing = false\n\n#### Directory listing sorting code\ndirectory-listing-order = 1\n\n#### Directory listing content format\ndirectory-listing-format = \"html\"\n\n#### Basic Authentication\n# basic-auth = \"\"\n\n#### File descriptor binding\n# fd = \"\"\n\n#### Worker threads\nthreads-multiplier = 1\n\n#### Grace period after a graceful shutdown\ngrace-period = 0\n\n#### Page fallback for 404s\n# page-fallback = \"\"\n\n#### Log request Remote Address if available\nlog-remote-address = false\n\n#### Log real IP from X-Forwarded-For header if available\nlog-forwarded-for = false\n\n#### IPs to accept the X-Forwarded-For header from. Empty means all\ntrusted-proxies = []\n\n#### Redirect to trailing slash in the requested directory uri\nredirect-trailing-slash = true\n\n#### Check for existing pre-compressed files\ncompression-static = true\n\n#### Health-check endpoint (GET or HEAD `/health`)\nhealth = false\n\n#### List of index files\n# index-files = \"index.html, index.htm\"\n#### Maintenance Mode\n\nmaintenance-mode = false\n# maintenance-mode-status = 503\n# maintenance-mode-file = \"./maintenance.html\"\n\n### Windows Only\n\n#### Run the web server as a Windows Service\n# windows-service = false\n\n\n[advanced]\n\n#### HTTP Headers customization (examples only)\n\n#### a. Oneline version\n# [[advanced.headers]]\n# source = \"**/*.{js,css}\"\n# headers = { Access-Control-Allow-Origin = \"*\" }\n\n#### b. Multiline version\n# [[advanced.headers]]\n# source = \"/index.html\"\n# [advanced.headers.headers]\n# Cache-Control = \"public, max-age=36000\"\n# Content-Security-Policy = \"frame-ancestors 'self'\"\n# Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"\n\n#### c. Multiline version with explicit key (dotted)\n# [[advanced.headers]]\n# source = \"**/*.{jpg,jpeg,png,ico,gif}\"\n# headers.Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"\n\n\n### URL Redirects (examples only)\n\n# [[advanced.redirects]]\n# source = \"**/*.{jpg,jpeg}\"\n# destination = \"/images/generic1.png\"\n# kind = 301\n\n# [[advanced.redirects]]\n# source = \"/index.html\"\n# destination = \"https://static-web-server.net\"\n# kind = 302\n\n### URL Rewrites (examples only)\n\n# [[advanced.rewrites]]\n# source = \"**/*.{png,ico,gif}\"\n# destination = \"/assets/favicon.ico\"\n## Optional redirection\n# redirect = 301\n\n# [[advanced.rewrites]]\n# source = \"**/*.{jpg,jpeg}\"\n# destination = \"/images/sws.png\"\n\n### Virtual Hosting\n\n# [[advanced.virtual-hosts]]\n## But if the \"Host\" header matches this...\n# host = \"sales.example.com\"\n## ...then files will be served from here instead\n# root = \"/var/sales/html\"\n\n# [[advanced.virtual-hosts]]\n# host = \"blog.example.com\"\n# root = \"/var/blog/html\"\n</code></pre>"},{"location":"configuration/config-file/#general-options","title":"General options","text":"<p>The TOML <code>[general]</code> section allows adjusting the current options available via the CLI/ENV ones.</p> <p>So they are equivalent to each other except for the <code>-w, --config-file</code> option which is omitted and can not be used for obvious reasons.</p> <p>Config file-based features are optional</p> <p>All server feature options via the configuration file are optional and can be omitted as needed.</p>"},{"location":"configuration/config-file/#advanced-options","title":"Advanced options","text":"<p>The TOML <code>[advanced]</code> section is intended for more complex features.</p> <p>For example Custom HTTP Headers, Custom URL Redirects, URL Rewrites, or Virtual Hosting</p>"},{"location":"configuration/config-file/#precedence","title":"Precedence","text":"<p>Whatever config file-based feature option will take precedence over its CLI or ENV equivalent.</p>"},{"location":"configuration/config-file/#usage","title":"Usage","text":"<p>The following command runs the server using a specific <code>config.toml</code> file.</p> <pre><code>static-web-server -w config.toml\n</code></pre>"},{"location":"configuration/environment-variables/","title":"Environment Variables","text":"<p>The server can be configured via the following environment variables.</p> <p>Remember</p> <ul> <li>Environment variables are equivalent to their command-line arguments.</li> <li>Command-line arguments take precedence over their equivalent environment variables.</li> </ul>"},{"location":"configuration/environment-variables/#server_host","title":"SERVER_HOST","text":"<p>The address of the host (e.g. 127.0.0.1). Default <code>[::]</code>.</p>"},{"location":"configuration/environment-variables/#server_port","title":"SERVER_PORT","text":"<p>The port of the host. Default <code>80</code>.</p>"},{"location":"configuration/environment-variables/#server_listen_fd","title":"SERVER_LISTEN_FD","text":"<p>Optional file descriptor number (e.g. <code>0</code>) to inherit an already-opened TCP listener (instead of using <code>SERVER_HOST</code> and/or <code>SERVER_PORT</code>). Default empty (disabled).</p>"},{"location":"configuration/environment-variables/#server_root","title":"SERVER_ROOT","text":"<p>Relative or absolute root directory path of static files. Default <code>./public</code>.</p>"},{"location":"configuration/environment-variables/#server_config_file","title":"SERVER_CONFIG_FILE","text":"<p>The Server configuration file path is in TOML format. See The TOML Configuration File.</p>"},{"location":"configuration/environment-variables/#server_grace_period","title":"SERVER_GRACE_PERIOD","text":"<p>Defines a grace period in seconds after a <code>SIGTERM</code> signal is caught which will delay the server before shutting it down gracefully. The maximum value is <code>255</code> seconds. The default value is <code>0</code> (no delay).</p>"},{"location":"configuration/environment-variables/#server_log_level","title":"SERVER_LOG_LEVEL","text":"<p>Specify a logging level in lowercase. Possible values are <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code> or <code>trace</code>. Default <code>error</code>.</p>"},{"location":"configuration/environment-variables/#server_log_remote_address","title":"SERVER_LOG_REMOTE_ADDRESS","text":"<p>Log incoming request information along with its Remote Address (IP) if available using the <code>info</code> log level. Default <code>false</code>.</p>"},{"location":"configuration/environment-variables/#server_log_x_real_ip","title":"SERVER_LOG_X_REAL_IP","text":"<p>Log the X-Real-IP header if available using the <code>info</code> log level. Default <code>false</code>.</p>"},{"location":"configuration/environment-variables/#server_log_forwarded_for","title":"SERVER_LOG_FORWARDED_FOR","text":"<p>Log the X-Forwarded-For header if available using the <code>info</code> log level. Default <code>false</code>.</p>"},{"location":"configuration/environment-variables/#server_trusted_proxies","title":"SERVER_TRUSTED_PROXIES","text":"<p>A comma separated list of IP addresses to accept the X-Forwarded-For header from. An empty string means trust all IPs. Default <code>\"\"</code></p>"},{"location":"configuration/environment-variables/#server_error_page_404","title":"SERVER_ERROR_PAGE_404","text":"<p>HTML file path for 404 errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. If a relative path is used then it will be resolved under the root directory. Default <code>./404.html</code>.</p>"},{"location":"configuration/environment-variables/#server_error_page_50x","title":"SERVER_ERROR_PAGE_50X","text":"<p>HTML file path for 50x errors. If the path is not specified or simply doesn't exist then the server will use a generic HTML error message. If a relative path is used then it will be resolved under the root directory. Default <code>./50x.html</code></p>"},{"location":"configuration/environment-variables/#server_fallback_page","title":"SERVER_FALLBACK_PAGE","text":"<p>A HTML file path (not relative to the root) used for <code>GET</code> requests when the requested path doesn't exist. The fallback page is served with a <code>200</code> status code, useful when using client routers. If the path doesn't exist then the feature is not activated.</p>"},{"location":"configuration/environment-variables/#server_threads_multiplier","title":"SERVER_THREADS_MULTIPLIER","text":"<p>The number of worker threads multiplier will be multiplied by the number of system CPUs using the formula: <code>worker threads = number of CPUs * n</code> where <code>n</code> is the value that changes here. When the multiplier value is 0 or 1 then the <code>number of CPUs</code> is used. The number of worker threads result should be a number between 1 and 32,768 though it is advised to keep this value on the smaller side. Default one thread per core.</p>"},{"location":"configuration/environment-variables/#server_max_blocking_threads","title":"SERVER_MAX_BLOCKING_THREADS","text":"<p>Maximum number of blocking threads.</p>"},{"location":"configuration/environment-variables/#server_http2_tls","title":"SERVER_HTTP2_TLS","text":"<p>Enable HTTP/2 with TLS support. Make sure also to adjust the current server port. Default <code>false</code> (disabled).</p>"},{"location":"configuration/environment-variables/#server_http2_tls_cert","title":"SERVER_HTTP2_TLS_CERT","text":"<p>Specify the file path to read the certificate. Default empty (disabled).</p>"},{"location":"configuration/environment-variables/#server_http2_tls_key","title":"SERVER_HTTP2_TLS_KEY","text":"<p>Specify the file path to read the private key. Default empty (disabled).</p>"},{"location":"configuration/environment-variables/#server_https_redirect","title":"SERVER_HTTPS_REDIRECT","text":"<p>Redirect all requests with scheme \"http\" to \"https\" for the current server instance. It depends on \"http2\" to be enabled.</p>"},{"location":"configuration/environment-variables/#server_https_redirect_host","title":"SERVER_HTTPS_REDIRECT_HOST","text":"<p>Canonical hostname or IP of the HTTPS (HTTPS/2) server. It depends on \"https-redirect\" to be enabled. Default <code>localhost</code>.</p>"},{"location":"configuration/environment-variables/#server_https_redirect_from_port","title":"SERVER_HTTPS_REDIRECT_FROM_PORT","text":"<p>HTTP host port where the redirect server will listen for requests to redirect them to HTTPS. It depends on \"https-redirect\" to be enabled. Default <code>80</code>.</p>"},{"location":"configuration/environment-variables/#server_https_redirect_from_hosts","title":"SERVER_HTTPS_REDIRECT_FROM_HOSTS","text":"<p>List of host names or IPs allowed to redirect from. HTTP requests must contain the HTTP 'Host' header and match against this list. It depends on \"https-redirect\" to be enabled. Default <code>localhost</code>.</p>"},{"location":"configuration/environment-variables/#server_cors_allow_origins","title":"SERVER_CORS_ALLOW_ORIGINS","text":"<p>Specify an optional CORS list of allowed origin hosts separated by commas. Host ports or protocols aren't being checked. Use an asterisk (*) to allow any host. Default empty (disabled).</p>"},{"location":"configuration/environment-variables/#server_cors_allow_headers","title":"SERVER_CORS_ALLOW_HEADERS","text":"<p>Specify an optional CORS list of allowed HTTP headers separated by commas. It requires <code>SERVER_CORS_ALLOW_ORIGINS</code> to be used along with. Default <code>origin, content-type</code>.</p>"},{"location":"configuration/environment-variables/#server_cors_expose_headers","title":"SERVER_CORS_EXPOSE_HEADERS","text":"<p>Specify an optional CORS list of exposed HTTP headers separated by commas. It requires <code>SERVER_CORS_ALLOW_ORIGINS</code> to be used along with. Default <code>origin, content-type</code>.</p>"},{"location":"configuration/environment-variables/#server_compression","title":"SERVER_COMPRESSION","text":"<p><code>Gzip</code>, <code>Deflate</code>, <code>Brotli</code> or <code>zlib</code> compression on demand determined by the <code>Accept-Encoding</code> header and applied to text-based web file types only. See ad-hoc mime-type list. Default <code>true</code> (enabled).</p>"},{"location":"configuration/environment-variables/#server_compression_level","title":"SERVER_COMPRESSION_LEVEL","text":"<p>Supported values are <code>fastest</code> (fast compression but larger resulting files), <code>best</code> (smallest file size but potentially slow) and <code>default</code> (algorithm-specific balanced compression level). Default is <code>default</code>.</p>"},{"location":"configuration/environment-variables/#server_compression_static","title":"SERVER_COMPRESSION_STATIC","text":"<p>Look up the pre-compressed file variant (<code>.gz</code>, <code>.br</code> or <code>.zst</code>) on the disk of a requested file and serve it directly if available. Default <code>false</code> (disabled). The compression type is determined by the <code>Accept-Encoding</code> header.</p>"},{"location":"configuration/environment-variables/#server_directory_listing","title":"SERVER_DIRECTORY_LISTING","text":"<p>Enable directory listing for all requests ending with the slash character (\u2018/\u2019). Default <code>false</code> (disabled).</p>"},{"location":"configuration/environment-variables/#server_directory_listing_order","title":"SERVER_DIRECTORY_LISTING_ORDER","text":"<p>Specify a default code number to order directory listing entries per <code>Name</code>, <code>Last modified</code> or <code>Size</code> attributes (columns). Code numbers supported: <code>0</code> (Name asc), <code>1</code> (Name desc), <code>2</code> (Last modified asc), <code>3</code> (Last modified desc), <code>4</code> (Size asc), <code>5</code> (Size desc). Default <code>6</code> (unordered).</p>"},{"location":"configuration/environment-variables/#server_directory_listing_format","title":"SERVER_DIRECTORY_LISTING_FORMAT","text":"<p>Specify a content format for the directory listing entries. Formats supported: <code>html</code> or <code>json</code>. Default <code>html</code>.</p>"},{"location":"configuration/environment-variables/#server_security_headers","title":"SERVER_SECURITY_HEADERS","text":"<p>Enable security headers by default when the HTTP/2 feature is activated. Headers included: <code>Strict-Transport-Security: max-age=63072000; includeSubDomains; preload</code> (2 years max-age), <code>X-Frame-Options: DENY</code> and <code>Content-Security-Policy: frame-ancestors 'self'</code>. Default <code>false</code> (disabled).</p>"},{"location":"configuration/environment-variables/#server_cache_control_headers","title":"SERVER_CACHE_CONTROL_HEADERS","text":"<p>Enable cache control headers for incoming requests based on a set of file types. The file type list can be found in <code>src/control_headers.rs</code> file. Default <code>true</code> (enabled).</p>"},{"location":"configuration/environment-variables/#server_basic_auth","title":"SERVER_BASIC_AUTH","text":"<p>It provides The \"Basic\" HTTP Authentication Scheme using credentials as <code>user-id:password</code> pairs, encoded using <code>Base64</code>. Password must be encoded using the BCrypt password-hashing function. Default empty (disabled).</p>"},{"location":"configuration/environment-variables/#server_redirect_trailing_slash","title":"SERVER_REDIRECT_TRAILING_SLASH","text":"<p>Check for a trailing slash in the requested directory URI and redirect permanent (308) to the same path with a trailing slash suffix if it is missing. Default <code>true</code> (enabled).</p>"},{"location":"configuration/environment-variables/#server_ignore_hidden_files","title":"SERVER_IGNORE_HIDDEN_FILES","text":"<p>Ignore hidden files/directories (dotfiles), preventing them from being served and being included in auto HTML index pages (directory listing).</p>"},{"location":"configuration/environment-variables/#server_disable_symlinks","title":"SERVER_DISABLE_SYMLINKS","text":"<p>Prevent following files or directories if any path name component is a symbolic link.</p>"},{"location":"configuration/environment-variables/#server_health","title":"SERVER_HEALTH","text":"<p>Activate the health endpoint.</p>"},{"location":"configuration/environment-variables/#server_index_files","title":"SERVER_INDEX_FILES","text":"<p>List of files that will be used as an index for requests ending with the slash character (\u2018/\u2019). Files are checked in the specified order. Default <code>index.html</code>.</p>"},{"location":"configuration/environment-variables/#server_maintenance_mode","title":"SERVER_MAINTENANCE_MODE","text":"<p>Enable the server's maintenance mode functionality.</p>"},{"location":"configuration/environment-variables/#server_maintenance_mode_status","title":"SERVER_MAINTENANCE_MODE_STATUS","text":"<p>Provide a custom HTTP status code when entering into maintenance mode. Default <code>503</code>.</p>"},{"location":"configuration/environment-variables/#server_maintenance_mode_file","title":"SERVER_MAINTENANCE_MODE_FILE","text":"<p>Provide a custom maintenance mode HTML file. If not provided then a generic message will be displayed.</p>"},{"location":"configuration/environment-variables/#windows","title":"Windows","text":"<p>The following options and commands are Windows platform-specific.</p>"},{"location":"configuration/environment-variables/#server_windows_service","title":"SERVER_WINDOWS_SERVICE","text":"<p>Run the web server in a Windows Service context. See more details.</p>"},{"location":"features/basic-authentication/","title":"Basic HTTP Authentication","text":"<p><code>SWS</code> provides 'Basic' HTTP Authentication Scheme using an <code>user:password</code> pair.</p> <p>This feature is disabled by default and can be controlled by the string <code>--basic-auth</code> option or the equivalent SERVER_BASIC_AUTH env.</p> <p>The format to use is the following:</p> <p><code>username:encrypted_password</code></p> <p>Both are separated by a <code>:</code> (punctuation mark) character.</p> <p>Password Encryption</p> <p>Only the password must be encoded using the <code>BCrypt</code> password-hashing function.</p> <p>As an example, we will use the Apache <code>htpasswd</code> tool to generate the <code>username:encrypted_password</code> pair.</p> <pre><code>htpasswd -nBC10 \"username\"\n# New password: \n# Re-type new password: \n# username:$2y$10$8phm28BB4YpKPDjOpdTT8eUcfVDw0xc85VZPxg2zae1GR8EQqus3i\n</code></pre> <p>Password Security Advice</p> <p>The password verification happens at runtime but its verification speed depends on the computing time cost of <code>bcrypt</code> algorithm used.</p> <p>For example, the <code>htpasswd</code> tool supports a <code>-C</code> argument to adjust the <code>bcrypt</code>'s computing time.</p> <p>Using a higher value is more secure but slower. The default value is <code>5</code> and the possible values are ranging from <code>4</code> to <code>17</code>.</p> <p>Docker Compose Advice</p> <p>If you are using <code>SERVER_BASIC_AUTH</code> env via a <code>docker-compose.yml</code> file don't forget to replace the single <code>$</code> (dollar sign) with a <code>$$</code> (double-dollar sign) if you want those individual <code>$</code> dollar signs in your configuration to be treated by Docker as literals. More details in the Docker Compose file: variable substitution page.</p> <p>Finally, assign the credentials and run the server.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --basic-auth 'username:$2y$10$8phm28BB4YpKPDjOpdTT8eUcfVDw0xc85VZPxg2zae1GR8EQqus3i'\n</code></pre>"},{"location":"features/blocking-threads/","title":"Blocking Threads Customization","text":"<p>SWS allows limiting the number of blocking threads powered by the Tokio runtime.</p> <p>This feature can be controlled by the numeric <code>-b, --max-blocking-threads</code> option or the equivalent SERVER_MAX_BLOCKING_THREADS env.</p> <p>WebAssembly</p> <p>We use <code>20</code> in Wasm by default and <code>512</code> in native environments (Tokio's default). See Tokio <code>max_blocking_threads</code> API for more details.</p> <p>Below is an example.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --max-blocking-threads 20\n</code></pre>"},{"location":"features/cache-control-headers/","title":"Cache-Control Headers","text":"<p><code>SWS</code> provides support for arbitrary <code>Cache-Control</code> HTTP header specifying <code>public</code> and <code>max-age</code> response directives.</p> <p>This feature is enabled by default and can be controlled by the boolean <code>-e, --cache-control-headers</code> option or the equivalent SERVER_CACHE_CONTROL_HEADERS env.</p> <p>Customize HTTP headers</p> <p>If you want to customize HTTP headers on demand then have a look at the Custom HTTP Headers section.</p>"},{"location":"features/cache-control-headers/#cache-control-max-age","title":"Cache-Control Max-Age","text":"<p>Control headers are applied only to the following file types with the corresponding <code>max-age</code> values.</p>"},{"location":"features/cache-control-headers/#one-day","title":"One day","text":"<p>A <code>max-age</code> of one day duration is used by default.</p> <p>Note</p> <p>One-day <code>max-age</code> for example includes <code>html</code> and other file types.</p>"},{"location":"features/cache-control-headers/#one-hour","title":"One hour","text":"<p>A <code>max-age</code> of one hour is applied only to the following file types.</p> <pre><code>atom, json, rss, xml\n</code></pre>"},{"location":"features/cache-control-headers/#one-year","title":"One year","text":"<p>A <code>max-age</code> of one year is applied only to the following file types.</p> <pre><code>avif, bmp, bz2, css, doc, gif, gz, htc, ico, jpeg, jpg, js, jxl, map, mjs, mp3, mp4, ogg, ogv, pdf, png, rar, rtf, tar, tgz, wav, weba, webm, webp, woff, woff2, zip\n</code></pre> <p>Below is an example of how to enable the feature.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --cache-control-headers true\n</code></pre>"},{"location":"features/compression-static/","title":"Pre-compressed files serving","text":"<p><code>SWS</code> provides support to serve pre-compressed <code>Gzip</code>, <code>Brotli</code> and <code>Zstandard</code> (zstd) files directly from the disk.</p> <p>SWS can look up existing pre-compressed file variants (<code>.gz</code>, <code>.br</code> or <code>.zst</code>) on disk and serve them directly.</p> <p>The feature is disabled by default and can be controlled by the boolean <code>--compression-static</code> option or the equivalent SERVER_COMPRESSION_STATIC env.</p> <p>When the <code>compression-static</code> option is enabled and the pre-compressed file is found on the file system then it's served directly. Otherwise, if the pre-compressed file is not found then SWS just continues the normal workflow (trying to serve the original file requested instead). Additionally, if for example the compression option was also enabled then the requested file can be compressed on the fly right after.</p> <p>Compressed file type</p> <p>The pre-compressed file type is determined by the <code>Accept-Encoding</code> header value.</p> <p>Here is an example:</p> <pre><code>static-web-server -p=8787 -d=/var/www --compression-static=true -g=trace\n</code></pre> <p>Below are some relevant log entries to show how the feature works.</p> <pre><code>2022-09-22T21:30:12.904102Z  INFO static_web_server::handler: incoming request: method=GET uri=/downloads/Capture5.png\n2022-09-22T21:30:12.904218Z TRACE static_web_server::static_files: dir: base=\"/var/www\", route=\"downloads/Capture5.png\"\n2022-09-22T21:30:12.904295Z TRACE static_web_server::compression_static: preparing pre-compressed file path variant of /var/www/downloads/Capture5.png\n2022-09-22T21:30:12.904509Z TRACE static_web_server::compression_static: getting metadata for pre-compressed file variant /var/www/downloads/Capture5.png.gz\n2022-09-22T21:30:12.904746Z TRACE hyper::proto::h1::conn: flushed({role=server}): State { reading: KeepAlive, writing: Init, keep_alive: Busy }\n2022-09-22T21:30:12.904932Z TRACE static_web_server::static_files: file found: \"/var/www/downloads/Capture5.png.gz\"\n2022-09-22T21:30:12.904983Z TRACE static_web_server::compression_static: pre-compressed file variant found, serving it directly\n2022-09-22T21:30:12.905095Z TRACE hyper::proto::h1::conn: flushed({role=server}): State { reading: KeepAlive, writing: Init, keep_alive: Busy }\n2022-09-22T21:30:12.905836Z TRACE encode_headers: hyper::proto::h1::role: Server::encode status=200, body=Some(Unknown), req_method=Some(GET)\n2022-09-22T21:30:12.905965Z TRACE encode_headers: hyper::proto::h1::role: close time.busy=138\u00b5s time.idle=35.4\u00b5s\n2022-09-22T21:30:12.906236Z DEBUG hyper::proto::h1::io: flushed 242 bytes\n</code></pre>"},{"location":"features/compression/","title":"Compression","text":"<p><code>SWS</code> provides <code>Gzip</code>, <code>Deflate</code>, <code>Brotli</code> and <code>Zstandard</code> (zstd) compression of HTTP responses.</p> <p>This feature is enabled by default and can be controlled by the boolean <code>-x, --compression</code> option or the equivalent SERVER_COMPRESSION env.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --compression true\n</code></pre>"},{"location":"features/compression/#choice-of-compression-algorithm","title":"Choice of compression algorithm","text":"<p>The compression algorithm is determined by the <code>Accept-Encoding</code> header and the compression support built into SWS. By default SWS builds with support for <code>Gzip</code>, <code>Deflate</code>, <code>Brotli</code> and <code>Zstandard</code> algorithms.</p>"},{"location":"features/compression/#mime-types-compressed","title":"MIME types compressed","text":"<p>Compression is only applied to files with the MIME types listed below, indicating text and similarly well compressing formats. The asterisk <code>*</code> is a placeholder indicating an arbitrary MIME type part.</p> <pre><code>text/*\n*+xml\n*+json\napplication/rtf\napplication/javascript\napplication/json\napplication/xml\nfont/ttf\napplication/font-sfnt\napplication/vnd.ms-fontobject\napplication/wasm\n</code></pre>"},{"location":"features/compression/#compression-level","title":"Compression level","text":"<p>SWS allows selecting the compression level via <code>--compression-level</code> command line option or the equivalent SERVER_COMPRESSION_LEVEL env. The available values are <code>fastest</code>, <code>best</code> and <code>default</code>. <code>fastest</code> will result in the lowest CPU load but also the worst compression factor. <code>best</code> will attempt to compress the data as much as possible (not recommended with <code>Brotli</code> or <code>Zstandard</code> compression, will be very slow). <code>default</code> tries to strike a balance, choosing a compression level where compression factor is already fairly good but the CPU load is still low.</p>"},{"location":"features/cors/","title":"CORS","text":"<p><code>SWS</code> provides optional Cross-Origin Resource Sharing (CORS) support.</p> <p>A list of allowed origin hosts (URLs) should be specified and separated by commas. Or an asterisk (*) can be used to allow any host.</p> <p>This feature is disabled by default and can be controlled by the string <code>-c, --cors-allow-origins</code> option or the equivalent SERVER_CORS_ALLOW_ORIGINS env.</p> <p>Below is an example of how to enable CORS.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --cors-allow-origins \"https://domain.com\"\n\n    # Or use an asterisk to allow any host\n    # --cors-allow-origins \"*\"\n</code></pre>"},{"location":"features/cors/#allowed-headers","title":"Allowed headers","text":"<p>The server also supports a list of CORS allowed headers separated by commas.</p> <p>This feature depends on <code>--cors-allow-origins</code> to be used along with this feature. It can be controlled by the string <code>-j, --cors-allow-headers</code> option or the equivalent SERVER_CORS_ALLOW_HEADERS env.</p> <p>Tips</p> <ul> <li>The default allowed headers value is <code>origin, content-type, authorization</code>.</li> <li>The server also supports preflight requests via the <code>OPTIONS</code> method. See Preflighted requests in CORS.</li> </ul> <p>Below is an example of how to CORS.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --cors-allow-origins \"https://domain.com\"\n    --cors-allow-headers \"origin, content-type, x-requested-with\"\n</code></pre>"},{"location":"features/cors/#exposed-headers","title":"Exposed headers","text":"<p>The server also supports a list of CORS-exposed headers to scripts separated by commas.</p> <p>This feature depends on <code>--cors-allow-origins</code> to be used along with this feature. It can be controlled by the string <code>--cors-expose-headers</code> option or the equivalent SERVER_CORS_EXPOSE_HEADERS env.</p> <p>Tips</p> <ul> <li>The default exposed header's is <code>origin, content-type</code>.</li> <li>The server also supports preflight requests via the <code>OPTIONS</code> method. See Preflighted requests in CORS.</li> </ul> <p>Below is an example of how to CORS.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --cors-allow-origins \"https://domain.com\"\n    --cors-expose-headers \"origin, content-type, x-requested-with\"\n</code></pre>"},{"location":"features/custom-http-headers/","title":"Custom HTTP Headers","text":"<p>SWS allows customizing the server HTTP Response headers on demand.</p>"},{"location":"features/custom-http-headers/#structure","title":"Structure","text":"<p>The Server HTTP response headers should be defined mainly as an Array of Tables.</p> <p>Each table entry should have two key/value pairs:</p> <ul> <li>One <code>source</code> key containing a string glob pattern.</li> <li>One <code>headers</code> key containing a set or hash table describing plain HTTP headers to apply.</li> </ul> <p>A particular set of HTTP headers can only be applied when a <code>source</code> matches against the request URI.</p> <p>Custom HTTP headers take precedence over existing ones</p> <p>Whatever custom HTTP header could replace an existing one if it was previously defined (e.g. server default headers) and matches its <code>source</code>.</p> <p>The header's order is important because determines its precedence.</p> <p>Example: If the feature <code>--cache-control-headers=true</code> is enabled but also a custom <code>cache-control</code> header was defined then the custom header will have priority.</p>"},{"location":"features/custom-http-headers/#source","title":"Source","text":"<p>The source is a Glob pattern that should match against the URI that is requesting a resource file.</p>"},{"location":"features/custom-http-headers/#headers","title":"Headers","text":"<p>A set of valid plain HTTP headers to be applied.</p>"},{"location":"features/custom-http-headers/#examples","title":"Examples","text":"<p>Below are some examples of how to customize server HTTP headers in three variants.</p>"},{"location":"features/custom-http-headers/#one-line-version","title":"One-line version","text":"<pre><code>[advanced]\n\n[[advanced.headers]]\nsource = \"**/*.{js,css}\"\nheaders = { Access-Control-Allow-Origin = \"*\" }\n</code></pre>"},{"location":"features/custom-http-headers/#multiline-version","title":"Multiline version","text":"<pre><code>[advanced]\n\n[[advanced.headers]]\nsource = \"*.html\"\n[advanced.headers.headers]\nCache-Control = \"public, max-age=36000\"\nContent-Security-Policy = \"frame-ancestors 'self'\"\nStrict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"\n</code></pre>"},{"location":"features/custom-http-headers/#multiline-version-with-explicit-header-key-dotted","title":"Multiline version with explicit header key (dotted)","text":"<pre><code>[advanced]\n\n[[advanced.headers]]\nsource = \"**/*.{jpg,jpeg,png,ico,gif}\"\nheaders.Strict-Transport-Security = \"max-age=63072000; includeSubDomains; preload\"\n</code></pre>"},{"location":"features/directory-listing/","title":"Directory Listing","text":"<p><code>SWS</code> provides a directory listing feature to display the content of directories.</p> <p>This feature is disabled by default and can be controlled by the boolean <code>-z, --directory-listing</code> option or the equivalent SERVER_DIRECTORY_LISTING env.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --directory-listing true\n</code></pre> <p>And here is an example of how the directory listing looks like.</p> <p></p>"},{"location":"features/directory-listing/#relative-paths-for-entries","title":"Relative paths for entries","text":"<p>SWS uses relative paths for the directory listing entries (file or directory) and is used regardless of the redirect trailing slash feature.</p> <p>However, when the \"redirect trailing slash\" feature is disabled and a directory request URI doesn't contain a trailing slash then the entries will contain the path <code>parent-dir/entry-name</code> as the link value. Otherwise, just an <code>entry-name</code> link value is used (default behavior).</p> <p>Note also that in both cases, SWS will append a trailing slash to the entry if is a directory.</p>"},{"location":"features/directory-listing/#sorting","title":"Sorting","text":"<p>Sorting by <code>Name</code>, <code>Last modified</code> and <code>Size</code> is enabled as clickable columns when the directory listing is activated via the <code>--directory-listing=true</code> option.</p> <p>You can also use the <code>sort</code> query parameter to sort manually by certain attributes from URI. E.g <code>https://localhost/?sort=5</code>.</p>"},{"location":"features/directory-listing/#sorting-by-default","title":"Sorting by default","text":"<p>Sometimes one wants to sort by a certain attribute but by default. In that case, the default ascending or descending ordering of files/dirs by their attributes is provided by the numeric <code>--directory-listing-order</code> option or the equivalent SERVER_DIRECTORY_LISTING_ORDER env.</p> <p>To do so you have to pass a code sorting number. E.g <code>--directory-listing-order=2</code>.</p>"},{"location":"features/directory-listing/#code-numbers-for-sorting","title":"Code numbers for sorting","text":"<p>Below are the possible number code values for sorting or ordering which are grouped by attribute.</p>"},{"location":"features/directory-listing/#name","title":"Name","text":"<ul> <li><code>0</code>: Ascending</li> <li><code>1</code>: Descending</li> </ul>"},{"location":"features/directory-listing/#last-modified","title":"Last modified","text":"<ul> <li><code>2</code>: Ascending</li> <li><code>3</code>: Descending</li> </ul>"},{"location":"features/directory-listing/#size","title":"Size","text":"<ul> <li><code>4</code>: Ascending</li> <li><code>5</code>: Descending</li> </ul>"},{"location":"features/directory-listing/#default","title":"Default","text":"<ul> <li><code>6</code>: Unordered</li> </ul> <p>Tips</p> <ul> <li>The <code>--directory-listing-order</code> option depends on <code>--directory-listing</code> to be enabled.</li> <li>Use the query <code>?sort=NUMBER</code> to customize the sorting via the URI. E.g <code>https://localhost/?sort=5</code> (sort by size in descending order)</li> </ul> <p>Example:</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --directory-listing true \\\n    # E.g Sorting file/dir names in descending order\n    --directory-listing-order 1\n</code></pre>"},{"location":"features/directory-listing/#output-format","title":"Output format","text":"<p><code>SWS</code> provides support for specifying an output format either HTML (default) or JSON for the directory listing entries via the string <code>--directory-listing-format</code> option or the equivalent SERVER_DIRECTORY_LISTING_FORMAT env.</p> <p>Tips</p> <ul> <li>The <code>--directory-listing-format</code> option depends on <code>--directory-listing</code> to be enabled.</li> </ul>"},{"location":"features/directory-listing/#html-format","title":"HTML format","text":"<p>This is the default format when <code>--directory-listing</code> is enabled.</p>"},{"location":"features/directory-listing/#json-format","title":"JSON format","text":"<p>The JSON format used is shown below for directories and files. Note that the <code>size</code> attribute is only available for files and the <code>mtime</code> value is UTC-based.</p> <pre><code>[\n  {\n    \"name\": \"my-directory\",\n    \"type\": \"directory\",\n    \"mtime\": \"2022-10-07T00:53:50Z\"\n  },\n  {\n    \"name\": \"my_file.tar.gz\",\n    \"type\": \"file\",\n    \"mtime\": \"2022-09-27T22:44:34Z\",\n    \"size\": 332\n  }\n]\n</code></pre> <p>Here is an example of serving the directory listing in JSON format.</p> <pre><code>static-web-server \\\n    -p=8787 -d=tests/fixtures/public -g=trace \\\n    --directory-listing=true \\\n    --directory-listing-format=\"json\"\n</code></pre> <p>And below is a client request example to illustrate how the feature works.</p> <pre><code>curl -iH \"content-type: application/json\" http://localhost:8787\n# HTTP/1.1 200 OK\n# content-type: application/json\n# content-length: 163\n# cache-control: public, max-age=86400\n# date: Tue, 11 Oct 2022 23:24:55 GMT\n\n# [{\"name\":\"sp\u00e9cial direct\u00f6ry\",\"type\":\"directory\",\"mtime\":\"2022-10-07T00:53:50Z\"},{\"name\":\"index.html.gz\",\"type\":\"file\",\"mtime\":\"2022-09-27T22:44:34Z\",\"size\":332}]\u23ce\n</code></pre>"},{"location":"features/disable-symlinks/","title":"Disable Symlinks","text":"<p><code>SWS</code> does follow symlinks by default. However, it's possible to disable all symlinks (deny access) by preventing to following files or directories if any path name component is a symbolic link. This applies to direct requests (URL) or those using the directory listing.</p> <p>As a result, SWS will respond with a <code>403 Forbidden</code> status if a symlink is requested or it won't be shown in the directory listing if enabled.</p> <p>This feature is disabled by default and can be controlled by the boolean <code>--disable-symlinks</code> option or the equivalent SERVER_DISABLE_SYMLINKS env.</p> <p>Here is an example of how to disable symlinks:</p> <pre><code>static-web-server \\\n    -p=8787 -d=./public -g=trace \\\n    --directory-listing \\\n    --disable-symlinks\n</code></pre>"},{"location":"features/docker/","title":"Docker","text":"<p><code>SWS</code> has first-class Docker support.</p> <p>It is provided in three Docker image variants such as Scratch, Alpine and Debian images.</p> <p>All images are available on Docker Hub and GitHub Container Registry.</p>"},{"location":"features/docker/#osarch","title":"OS/Arch","text":"<p>All Docker images are Multi-Arch and the following operating systems and architectures are supported.</p> <ul> <li><code>linux/386</code></li> <li><code>linux/amd64</code></li> <li><code>linux/arm/v6</code></li> <li><code>linux/arm/v7</code></li> <li><code>linux/arm64</code></li> <li><code>linux/ppc64le</code> (Debian only)</li> <li><code>linux/s390x</code> (Debian only)</li> </ul> <p>SWS statically-linked binary</p> <p>All the Docker images use the SWS statically-linked binary, meaning that the binary is highly optimized, performant, and dependency-free thanks to musl libc.</p>"},{"location":"features/docker/#run-a-container","title":"Run a container","text":"<p>To give the server a quick try just run the following commands.</p> <p>Tips</p> <ul> <li>The SWS CLI arguments can be provided directly to the container or omitted as shown below.</li> <li>A Docker volume like <code>-v $HOME/my-public-dir:/public</code> can be specified to overwrite the default root directory.</li> </ul> <p>To run SWS, there are several Docker image variants that you can use.</p>"},{"location":"features/docker/#scratch-just-the-binary","title":"Scratch (just the binary)","text":"<pre><code>docker run --rm -it -p 8787:80 joseluisq/static-web-server:2 -g info\n# or\ndocker run --rm -it -p 8787:80 ghcr.io/static-web-server/static-web-server:2 -g info\n</code></pre>"},{"location":"features/docker/#alpine","title":"Alpine","text":"<pre><code>docker run --rm -it -p 8787:80 joseluisq/static-web-server:2-alpine -g info\n# or\ndocker run --rm -it -p 8787:80 ghcr.io/static-web-server/static-web-server:2-alpine -g info\n</code></pre>"},{"location":"features/docker/#debian","title":"Debian","text":"<pre><code>docker run --rm -it -p 8787:80 joseluisq/static-web-server:2-debian -g info\n# or\ndocker run --rm -it -p 8787:80 ghcr.io/static-web-server/static-web-server:2-debian -g info\n</code></pre>"},{"location":"features/docker/#development","title":"Development","text":"<p>Additionally, we publish development Docker images based on <code>master</code> branch changes.</p> <pre><code># Scratch (just the binary)\ndocker run --rm -it -p 8787:80 ghcr.io/static-web-server/static-web-server:devel -g info\n# Debian\ndocker run --rm -it -p 8787:80 ghcr.io/static-web-server/static-web-server:devel-debian -g info\n</code></pre>"},{"location":"features/docker/#dockerfile","title":"Dockerfile","text":"<p>SWS Docker images can be extended as needed.</p> <p>Extending the Scratch Docker image (just the binary)</p> <pre><code>FROM joseluisq/static-web-server:2\n# or\nFROM ghcr.io/static-web-server/static-web-server:2\n# do stuff...\n</code></pre> <p>Or the Alpine</p> <pre><code>FROM joseluisq/static-web-server:2-alpine\n# or\nFROM ghcr.io/static-web-server/static-web-server:2-alpine\n# do stuff...\n</code></pre> <p>Or the Debian</p> <pre><code>FROM joseluisq/static-web-server:2-debian\n# or\nFROM ghcr.io/static-web-server/static-web-server:2-debian\n# do stuff...\n</code></pre>"},{"location":"features/docker/#docker-compose","title":"Docker Compose","text":"<p>Example using Docker Compose.</p> <pre><code>version: \"3.3\"\n\nservices:\n  website:\n    image: joseluisq/static-web-server:2-alpine\n    container_name: \"website\"\n    ports:\n      - 80:80\n    restart: unless-stopped\n    environment:\n      # Note: those envs are customizable but also optional\n      - SERVER_ROOT=/var/public\n      - SERVER_CONFIG_FILE=/etc/config.toml\n    volumes:\n      - ./public:/var/public\n      - ./config.toml:/etc/config.toml\n</code></pre>"},{"location":"features/docker/#traefik-proxy","title":"Traefik Proxy","text":"<p>Example using Docker Swarm and Traefik Proxy.</p> <ol> <li>Create an external <code>traefik_net</code> Docker attachable network for Traefik:<ul> <li><code>docker network create --driver=overlay --attachable traefik_net</code></li> </ul> </li> <li>Map a host directory like <code>/var/www/website</code> to the service container or create an external <code>website_data</code> Docker volume if you prefer:<ul> <li><code>docker volume create website_data</code></li> </ul> </li> </ol> <pre><code>version: \"3.3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.11\"\n    command:\n      #- \"--log.level=DEBUG\"\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedbydefault=false\"\n      - \"--entrypoints.web.address=:80\"\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n\n  website:\n    image: joseluisq/static-web-server:2\n    environment:\n      # Note: those envs are customizable but also optional\n      - SERVER_ROOT=/public\n    volumes:\n      - /var/www/website:/public\n      # Or use an existing Docker volume\n      # - website_data:/public\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=traefik_net\"\n      - \"traefik.http.routers.website.entrypoints=web\"\n      - \"traefik.http.routers.website.rule=Host(`website.localhost`)\"\n      - \"traefik.http.routers.website.priority=1\"\n      - \"traefik.http.services.website.loadbalancer.server.port=80\"\n    networks:\n      - traefik_net\n\n# volumes:\n#   website_data:\n#     external: true\n\nnetworks:\n  traefik_net:\n    external: true\n</code></pre>"},{"location":"features/docker/#kubernetes","title":"Kubernetes","text":"<p>Example using Kubernetes pod with liveness probe.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: website\nspec:\n  containers:\n    - name: sws\n      image: ghcr.io/static-web-server/static-web-server\n      command:\n        - static-web-server\n        - --root=/public\n        - --health\n      ports:\n      - containerPort: 80\n      livenessProbe:\n        httpGet:\n          path: /health\n          port: http\n</code></pre>"},{"location":"features/docker/#truecharts","title":"TrueCharts","text":"<p>The TrueCharts Community also provides a ready-to-use Static Web Server Helm-Chart that you can easily deploy in your Kubernetes.</p>"},{"location":"features/error-pages/","title":"Error Pages","text":"<p><code>SWS</code> provides custom HTML error pages for the HTTP <code>404</code> and <code>50x</code> status errors.</p> <p>This feature is enabled by default and can be controlled either by the string <code>--page404</code> (SERVER_ERROR_PAGE_404) or the <code>--page50x</code> (SERVER_ERROR_PAGE_50X) arguments.</p> <p>Tip</p> <p>Either <code>--page404</code> and <code>--page50x</code> have defaults (optional values) so they can be specified or omitted as required.</p> <p>Below is an example of how to customize those HTML pages.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --page404 ./my-page-404.html \\\n    --page50x ./my-page-50x.html\n</code></pre>"},{"location":"features/error-pages/#fallback-page-for-use-with-client-routers","title":"Fallback Page for use with Client Routers","text":"<p>It is possible to provide a HTML file to be used as fallback page when <code>GET</code> request paths dont exist. The fallback page will be served with a <code>200</code> status code, useful when using client routers like <code>React Router</code> or similar. If the path is not specified or simply doesn't exist then this feature will not be activated.</p> <p>The fallback page path is not relative to the root</p> <p>The fallback page is an independent path, so provide a valid relative or absolute path.</p> <p>It can be set with the <code>SERVER_FALLBACK_PAGE</code> environment variable or with the CLI argument <code>--page-fallback</code>.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --page-fallback ./my-public-dir/index.html\n</code></pre>"},{"location":"features/file-descriptor-socket-passing/","title":"File Descriptor Socket Passing","text":"<p>SWS provides the ability to accept a socket listener as a file descriptor for use in sandboxing and on-demand applications via <code>systemd</code> (Linux), <code>launchd</code> (Macos) or similar.</p> <p>Tip</p> <p>The Socket Activation model is an alternative to TCP port binding.</p> <p>Socket activation is supported by the <code>-f, --fd</code> option or the equivalent SERVER_LISTEN_FD env.</p> <p>If you are using <code>inetd</code>, its \"<code>wait</code>\" option should be used in conjunction with static-web-server's <code>--fd 0</code> option.</p>"},{"location":"features/file-descriptor-socket-passing/#systemd","title":"Systemd","text":"<p>If you're using <code>systemd</code> on Linux, there is a fully working example in the SWS Git repository under the .<code>/systemd</code> directory.</p>"},{"location":"features/file-descriptor-socket-passing/#service-example","title":"Service example","text":"<p>Below is a <code>systemd</code> service example. Follow the steps to create an SWS service using HTTP2 (<code>static-web-server.service</code>). The service will bind SWS to a TCP <code>443</code> privileged port without running the server as root.</p> <p>If you want to change the server port used by the service, edit the value of <code>ListenStream</code> in the <code>static-web-server.socket</code> file.</p> <p>The template files can be found in .<code>/systemd</code> directory.</p> <pre><code># 1. Copy environment file template\n#    Use an environment variable file, add/modify the values if necessary and\n#    assign the proper owner/permissions to the environment variable file.\n#    TIP: you could skip this step and use a config file if you prefer.\ncp systemd/etc_default_static-web-server /etc/default/static-web-server\n\n# TIP: For example, you could create a `nologin` user with specific privileges.\n\n# 2. Copy service file templates\ncp systemd/static-web-server.s* /etc/systemd/system/\n\n# 3. Make sure that the `EnvironmentFile` and `ExecStart` values\n#    of the service match to the corresponding file paths in the `static-web-server.service` file.\n#    TIP: Use absolute paths. \n# EnvironmentFile=/etc/default/static-web-server\n# ExecStart=/usr/local/bin/static-web-server --fd 0\n\n# 4. Make sure to change this value with an existing user editing the `static-web-server.service` file.\n# SupplementaryGroups=www-data\n\n# 5. Create/reuse a directory for placing the certificate and private key.\n#    TIP: this is an example, you can create/reuse your own dirs.\nsudo mkdir /etc/static-web-server\n\n# 6. For example purposes, copy the testing cert/key files.\n#    TIP: Use your own cert/key files instead.\nsudo cp tests/tls/local.dev_cert.ecc.pem /etc/static-web-server/\nsudo cp tests/tls/local.dev_key.ecc.pem /etc/static-web-server/\n\n# 7. Create/reuse a root directory (example only)\nsudo mkdir -p /var/www/html\nsudo sh -c 'echo \"&lt;h1&gt;Static Web Server is running!&lt;/h1&gt;\" &gt; /var/www/html/index.html'\n\n# 8. Reload systemd manager configuration\nsudo systemctl daemon-reload\n\n# 9. Start the SWS service\nsudo systemctl start static-web-server.service\n\n# 10. Show the status of the SWS service running\nsudo systemctl status static-web-server.service\n\n# 11. Enable the service to start automatically at boot (optional)\nsudo systemctl enable static-web-server.service\n\n# 12. Analyze and debug the SWS service security\nsudo systemd-analyze security static-web-server.service\n#    If the service was successfully created then you should get something like:\n#    \u2192 Overall exposure level for static-web-server.service: 0.6 SAFE \ud83d\ude00\n</code></pre>"},{"location":"features/file-descriptor-socket-passing/#testing","title":"Testing","text":"<p>Alternatively, the lightweight <code>systemfd</code> utility may be useful, especially for testing purposes.</p> <p>For example, using <code>systemfd</code> utility as follows:</p> <pre><code>sudo systemfd --no-pid -s http::8091 -- path/to/static-web-server --fd 0\n</code></pre> <p>Or if you want to test using an environment variables file then you could use Enve.</p> <pre><code>sudo enve -f /path/to/environment.env systemfd --no-pid -s http::443 -- path/to/static-web-server --fd 0\n</code></pre>"},{"location":"features/graceful-shutdown/","title":"Graceful Shutdown","text":"<p>SWS can terminate gracefully in what is known as a graceful shutdown process.</p> <p>It means that when a <code>SIGTERM</code> termination signal is caught the server will stop receiving more requests immediately but in turn, it will continue processing all existing requests until they are completed (or closed).</p> <p>Tips</p> <ul> <li>In BSD/Unix-like systems, SWS will start the graceful shutdown process when a <code>SIGTERM</code>, <code>SIGINT</code> or <code>SIGQUIT</code> termination signal is caught.</li> <li>In Windows systems otherwise, SWS will start the graceful shutdown process right after a CTRL + C. This is used to abort the current task.</li> </ul>"},{"location":"features/graceful-shutdown/#grace-period","title":"Grace Period","text":"<p>Sometimes one wants to control the graceful shutdown process for different reasons. For example during Kubernetes rollouts.</p> <p>In these situations, SWS allows delaying the graceful shutdown process right after a <code>SIGTERM</code> providing a grace period in seconds.</p> <p>The feature is disabled by default and can be controlled by the numeric <code>-q, --grace-period</code> option or its equivalent SERVER_GRACE_PERIOD env.</p> <p>Tip</p> <p>The maximum grace period value is <code>255</code> seconds (4.25 min). The default value is <code>0</code> (no delay).</p> <p>Here is an example of delaying the graceful shutdown process by <code>10</code> seconds after a <code>SIGTERM</code>.</p> <pre><code>static-web-server -p 8787 -d ./public/ -g trace --grace-period 10\n</code></pre>"},{"location":"features/health-endpoint/","title":"Health endpoint","text":"<p>SWS provides an optional <code>/health</code> endpoint that can be used to check if it is running properly. When the  <code>/health</code> is requested, SWS will generate a log only at the <code>debug</code> level instead of the usual <code>info</code> level for a regular file.</p> <p>The HTTP methods supported are <code>GET</code> and <code>HEAD</code>.</p> <p>This feature is disabled by default and can be controlled by the boolean <code>--health</code> option or the equivalent SERVER_HEALTH env.</p>"},{"location":"features/health-endpoint/#usage-with-kubernetes-liveness-probe","title":"Usage with Kubernetes liveness probe","text":"<p>The health endpoint is well suited for the Kubernetes liveness probe:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: frontend\nspec:\n  containers:\n    - name: sws\n      image: frontend:1.0.0\n      command:\n        - static-web-server\n        - --root=/public\n        - --log-level=info\n        - --health\n      ports:\n      - containerPort: 80\n        name: http\n      livenessProbe:\n        httpGet:\n          path: /health\n          port: http\n</code></pre>"},{"location":"features/http-https-redirect/","title":"HTTP to HTTPS redirect","text":"<p><code>SWS</code> provides support for redirecting HTTP requests to HTTPS via a 301 Moved Permanently redirect status response code.</p> <p>This feature is disabled by default and can be controlled by the boolean <code>--https-redirect</code> option or the equivalent SERVER_HTTPS_REDIRECT env.</p> <p>HTTP/2 required</p> <p>HTTPS redirect requires the HTTP/2 feature to be activated.</p>"},{"location":"features/http-https-redirect/#https-redirect","title":"HTTPS redirect","text":"<p>The boolean <code>--https-redirect</code> is the main option and controls the whole HTTPS redirect feature. If <code>true</code> then will tell SWS to redirect all requests with scheme <code>http</code> to <code>https</code> for the current server instance with a <code>301 Moved Permanently</code> redirect status response code.  This option depends on <code>http2</code> to be enabled.</p>"},{"location":"features/http-https-redirect/#https-redirect-host","title":"HTTPS redirect host","text":"<p>The string <code>--https-redirect-host</code> option represents the canonical hostname or IP of the HTTPS (HTTPS/2) server. This is usually associated with the <code>--host</code> option, however here this value will be used as the destination for the redirected requests. It depends on \"https-redirect\" option to be enabled. The default is <code>localhost</code>.</p>"},{"location":"features/http-https-redirect/#https-redirect-from-port","title":"HTTPS redirect from port","text":"<p>The string <code>--https-redirect-from-port</code> option represents the HTTP host port where the redirect server will listen for requests (source) to redirect them to HTTPS. It depends on \"https-redirect\" option to be enabled. The default is <code>80</code>.</p>"},{"location":"features/http-https-redirect/#https-redirect-from-hosts","title":"HTTPS redirect from hosts","text":"<p>The string <code>--https-redirect-from-hosts</code> option represents a list of hostnames or IPs allowed to redirect from using comma-separated values. Incoming HTTP requests must contain the HTTP <code>Host</code> header and match against this list. It depends on \"https-redirect\" option to be enabled. The default value is <code>localhost</code>.</p> <p>Tip: define hostnames/IPs to redirect from for increasing security</p> <ul> <li>Via the <code>--https-redirect-from-hosts</code> or its env you can tell SWS which hostnames or IPs are allowed to redirect from your SWS server instance to avoid potential spoofing issues.</li> <li>When a hostname or IP is not found in the whitelist then SWS will respond with a <code>400 Bad Request</code> status response.</li> </ul>"},{"location":"features/http-https-redirect/#example","title":"Example","text":"<p>Below is an example of the feature.</p> <pre><code>static-web-server -p 4433 -d public/ -g trace \\\n    # HTTP/2 + TLS options\n    --http2=true \\\n    --http2-tls-cert=tests/tls/local.dev_cert.ecc.pem \\\n    --http2-tls-key=tests/tls/local.dev_key.ecc.pem \\\n\\\n    # HTTPS redirect options\n    --https-redirect=true \\\n    --https-redirect-host=\"localhost\" \\\n    --https-redirect-from-port=80 \\\n    --https-redirect-from-hosts=\"localhost\"\n    # or using multiple hostnames/IPs:\n    # --https-redirect-from-hosts = \"localhost,127.0.0.1\"\n</code></pre> <p>After running the server, the logs should look as follows.</p> <pre><code>.......\n2023-06-01T22:30:17.555338Z  INFO static_web_server::server: http to https redirect: enabled=true\n2023-06-01T22:30:17.555349Z  INFO static_web_server::server: http to https redirect host: localhost\n2023-06-01T22:30:17.555359Z  INFO static_web_server::server: http to https redirect from port: 80\n2023-06-01T22:30:17.555368Z  INFO static_web_server::server: http to https redirect from hosts: localhost\n2023-06-01T22:30:17.557507Z  INFO Server::start_server{addr_str=\"[::]:4433\" threads=8}: static_web_server::server: close time.busy=0.00ns time.idle=3.00\u00b5s\n2023-06-01T22:30:17.557547Z  INFO static_web_server::server: http2 server is listening on https://[::]:4433\n2023-06-01T22:30:17.557583Z  INFO Server::start_server{addr=[::]:80 threads=8}: static_web_server::server: close time.busy=0.00ns time.idle=1.92\u00b5s\n2023-06-01T22:30:17.557596Z  INFO static_web_server::server: http1 redirect server is listening on http://[::]:80\n2023-06-01T22:30:17.557768Z  INFO static_web_server::server: press ctrl+c to shut down the servers\n</code></pre>"},{"location":"features/http-methods/","title":"HTTP Methods Supported","text":"<p><code>SWS</code> only supports <code>GET</code>, <code>HEAD</code> and <code>OPTIONS</code> HTTP methods.</p>"},{"location":"features/http-methods/#options-method","title":"OPTIONS Method","text":""},{"location":"features/http-methods/#identifying-allowed-request-methods","title":"Identifying allowed request methods","text":"<p>The HTTP OPTIONS method can be used to send a request to check for permitted communication options for either a given URL or server.</p> <p>Example using an HTTP client.</p> <pre><code>curl -I -X OPTIONS http://localhost:8787/assets/main.js\n# HTTP/1.1 204 No Content\n# allow: OPTIONS, HEAD, GET\n# accept-ranges: bytes\n# cache-control: public, max-age=31536000\n# date: Thu, 10 Mar 2022 21:26:01 GMT\n</code></pre>"},{"location":"features/http-methods/#preflight-requests-in-cors","title":"Preflight requests in CORS","text":"<p>The HTTP OPTIONS method can also be used to send a request asking if it is acceptable to send requests to the server and if it is aware of using specific methods and headers.</p> <p>Tip</p> <p>If an <code>Access-Control-Request-Method</code> or <code>Access-Control-Request-Headers</code> value is not allowed then the server replies with a <code>403 Forbidden</code> HTTP error. See CORS feature for more details.</p> <p>Example using an HTTP client.</p> <pre><code>curl http://localhost:8787/assets/main.js \\\n    -I -X OPTIONS \\\n    -H \"Access-Control-Request-Method: HEAD\" \\\n    -H \"Access-Control-Request-Headers: content-type\" \\\n    -H \"Origin: http://localhost:8787\"\n# HTTP/1.1 204 No Content\n# access-control-allow-origin: http://localhost:8787\n# accept-ranges: bytes\n# access-control-allow-headers: content-type, origin\n# access-control-allow-methods: GET, OPTIONS, HEAD\n# cache-control: public, max-age=31536000\n# date: Thu, 10 Mar 2022 21:45:55 GMT\n</code></pre>"},{"location":"features/http1/","title":"HTTP/1","text":"<p>The HTTP/1 is the protocol by default and can be used by specifying a host address via the <code>-a, --host</code> (SERVER_HOST) argument, the port of the host via <code>-p, --port</code> (SERVER_PORT) and the directory of the static files using the <code>-d, --root</code> (SERVER_ROOT) argument.</p> <p>Tips</p> <ul> <li>Either <code>--host</code>, <code>--port</code> and <code>--root</code> have defaults (optional values) so they can be specified or omitted as required.</li> <li>The server provides Termination Signal handling with Graceful Shutdown ability by default.</li> </ul> <p>Below is an example of how to run the server using HTTP/1.</p> <pre><code>static-web-server \\\n    --host 127.0.0.1 \\\n    --port 8787 \\\n    --root ./my-public-dir\n</code></pre>"},{"location":"features/http2-tls/","title":"HTTP/2 and TLS","text":"<p><code>SWS</code> provides HTTP/2 protocol and TLS support.</p> <p>This feature is disabled by default and can be activated via the boolean <code>-t, --http2</code> option as well as string arguments <code>--http2-tls-cert</code> (TLS certificate file path) and <code>--http2-tls-key</code> (private key file path).</p>"},{"location":"features/http2-tls/#safe-tls-defaults","title":"Safe TLS defaults","text":"<p>SWS comes with safe TLS defaults for underlying cryptography.</p> <ul> <li>Cipher suites:<ul> <li>TLS1.3:   <pre><code>TLS13_AES_256_GCM_SHA384\nTLS13_AES_128_GCM_SHA256\nTLS13_CHACHA20_POLY1305_SHA256\n</code></pre></li> <li>TLS1.2:   <pre><code>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n</code></pre></li> </ul> </li> <li>Key exchange groups:<ul> <li><code>X25519</code>, <code>SECP256R1</code> and <code>SECP384R1</code></li> </ul> </li> <li>Protocol versions:<ul> <li>TLS <code>1.2</code> and <code>1.3</code></li> </ul> </li> </ul> <p>These defaults are safe and useful for most use cases. See Rustls safe defaults for more details.</p>"},{"location":"features/http2-tls/#private-key-file-formats","title":"Private key file formats","text":"<p>Only the following private key file formats are supported:</p> <ul> <li>RSA Private Key: A DER-encoded plaintext RSA private key as specified in PKCS#1/RFC3447.</li> <li>PKCS8 Private Key: A DER-encoded plaintext private key as specified in PKCS#8/RFC5958.</li> <li>EC Private Key: A Sec1-encoded plaintext private key as specified in RFC5915.</li> </ul>"},{"location":"features/http2-tls/#example","title":"Example","text":"<p>Tips</p> <ul> <li>Either <code>--host</code>, <code>--port</code> and <code>--root</code> have defaults (optional values) so they can be specified or omitted as required.</li> <li>Don't forget to adjust the proper <code>--port</code> value for the HTTP/2 &amp; TLS feature.</li> <li>When this feature is enabled (<code>--http2=true</code>) then the security headers are also enabled automatically.</li> <li>The server provides Termination Signal handling with Graceful Shutdown ability by default.</li> </ul> <pre><code>static-web-server \\\n    --host 127.0.0.1 \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --http2 true \\\n    --http2-tls-cert ./my-tls.cert \\\n    --http2-tls-key ./my-tls.key\n</code></pre>"},{"location":"features/ignore-files/","title":"Ignore files","text":"<p><code>SWS</code> provides some options to ignore files or directories from being served and displayed if the directory listing is enabled. </p>"},{"location":"features/ignore-files/#ignore-hidden-files-dotfiles","title":"Ignore hidden files (dotfiles)","text":"<p>SWS doesn't ignore dotfiles (hidden files) by default. However, it's possible to ignore those files as shown below. As a result, SWS will respond with a <code>404 Not Found</code> status.</p> <p>This feature is disabled by default and can be controlled by the boolean <code>--ignore-hidden-files</code> option or the equivalent SERVER_IGNORE_HIDDEN_FILES env.</p> <p>Here is an example of how to ignore hidden files:</p> <pre><code>static-web-server \\\n    -p=8787 -d=tests/fixtures/public -g=trace \\\n    --directory-listing=true \\\n    --ignore-hidden-files true\n</code></pre>"},{"location":"features/logging/","title":"Logging","text":"<p><code>SWS</code> provides logging support by just specifying a log level in lower case. The values allowed are <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code> and <code>trace</code>. The default value is <code>error</code>.</p> <p>This feature is enabled by default and can be controlled by the string <code>-g, --log-level</code> option or the equivalent SERVER_LOG_LEVEL env.</p> <p>Below is an example of how to adjust the log level.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --log-level \"trace\"\n</code></pre> <p>Note: The log format is not well defined and is subject to change.</p>"},{"location":"features/logging/#log-remote-addresses","title":"Log Remote Addresses","text":"<p>SWS provides Remote Address (IP) logging for every request via an <code>INFO</code> log level.</p> <p>This feature is disabled by default and can be enabled by the boolean <code>--log-remote-address</code> option or the equivalent SERVER_LOG_REMOTE_ADDRESS env.</p> <p>If the feature is enabled then log entries for requests will contain a <code>remote_addr</code> section with the remote address (IP) value. Otherwise, it will be empty.</p> <p>Log entry example:</p> <pre><code>2022-05-23T22:24:50.519540Z  INFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625\n</code></pre> <p>Below is an example of how to enable Remote Address (IP) logging.</p> <pre><code>static-web-server -a \"0.0.0.0\" -p 8080 -d docker/public/ -g info --log-remote-address=true\n</code></pre> <p>The relevant log output: <pre><code>INFO static_web_server::logger: logging level: info\n&lt;...&gt;\nINFO static_web_server::info: log requests with remote IP addresses: enabled=true\n&lt;...&gt;\nINFO static_web_server::handler: incoming request: method=GET uri=/ remote_addr=192.168.1.126:57625\nINFO static_web_server::handler: incoming request: method=GET uri=/favicon.ico remote_addr=192.168.1.126:57625\n</code></pre></p>"},{"location":"features/logging/#logging-client-ip-from-x-real-ip-header","title":"Logging Client IP from X-Real-IP header","text":"<p>Some upstream proxies will report the client's real IP address in the <code>X-Real-IP</code> header.</p> <p>To enable logging of the X-Real-IP header, enable the <code>--log-x-real-ip</code> option or the equivalent SERVER_LOG_X_REAL_IP environment variable.</p> <p>When enabled, the log entries will look like:</p> <pre><code>INFO static_web_server::handler: incoming request: method=GET uri=/ x_real_ip=203.0.113.195\n</code></pre> <p>If the value of the <code>X-Real-IP</code> header does not parse as an IP address, no value will be logged.</p> <p>To restrict the logging to only requests that originate from trusted proxy IPs, you can use the <code>--trusted-proxies</code> option, or the equivalent SERVER_TRUSTED_PROXIES env. This should be a list of IPs, separated by commas. An empty list (the default) indicates that all IPs should be trusted.</p>"},{"location":"features/logging/#logging-client-ip-from-x-forwarded-for-header","title":"Logging Client IP from X-Forwarded-For header","text":"<p>Note: This header should only be trusted when you know your upstream is handling X-Forwarded-For securely and when using the <code>--trusted-proxies</code> option.</p> <p>When used behind a reverse proxy the reported <code>remote_addr</code> indicates the proxies IP address and port, not the client's real IP. The Proxy server can be configured to provide the X-Forwarded-For header, containing a comma-separated list of IP addresses, starting with the real remote client IP, and all following intermediate proxies (if any).</p> <p>To enable logging of the real remote IP, enable the <code>--log-forwarded-for</code> option or the equivalent SERVER_LOG_FORWARDED_FOR env. By default this will log all requests which have a correctly formatted <code>X-Forwarded-For</code> header. </p> <p>Since the content of the <code>X-Forwarded-For</code> header can be changed by all proxies in the chain, the remote IP address reported may not be trusted.</p> <p>To restrict the logging to only requests that originate from trusted proxy IPs, you can use the <code>--trusted-proxies</code> option, or the equivalent SERVER_TRUSTED_PROXIES env. This should be a list of IPs, separated by commas. An empty list (the default) indicates that all IPs should be trusted.</p> <p>Command used for the following examples: <pre><code>static-web-server -a \"::\" --log-forwarded-for=true --trusted-proxies=\"::1\" -p 8080 -d docker/public/ -g info\n</code></pre></p> <p>Look for these lines in the log output: <pre><code>&lt;...&gt;\nINFO static_web_server::info: log level: info\nINFO static_web_server::info: log requests with remote IP addresses: enabled=false\nINFO static_web_server::info: log X-Forwarded-For real remote IP addresses: enabled=true\nINFO static_web_server::info: trusted IPs for X-Forwarded-For: [::1]\n&lt;...&gt;\n</code></pre></p> <p>We can simulate request as from behind reverse proxy with additional intermediate-proxy with following command:</p> <pre><code>curl \"http://[::1]:8080\" --header \"X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348\"\n</code></pre> <p>Log entry for this request will look like:</p> <pre><code>INFO static_web_server::handler: incoming request: method=GET uri=/ real_remote_ip=203.0.113.195\n</code></pre> <p>If we send the request from <code>127.0.0.1</code> instead: <pre><code>curl \"http://127.0.0.1:8080\" --header \"X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348\"\n</code></pre></p> <p>we get the following log output: <pre><code>INFO static_web_server::handler: incoming request: method=GET uri=/\n</code></pre> <code>127.0.0.1</code> is not in the <code>trusted_proxies</code>, so we dont get a <code>real_remote_address</code> in the log.</p> <p>Note the absence of the proxies remote address in these examples. If you want to log the remote address and the real remote address, you need to specify both <code>--log-remote-address</code> and <code>--log-forwarded-for</code>.</p> <p><code>SWS</code> will parse the <code>X-Forwarded-For</code> header and if the provided client IP is invalid, it will be ignored to prevent log poisoning attacks. In such cases the <code>real_remote_ip</code> section will not be added.</p> <p>Example from above, but with invalid header:</p> <pre><code>curl \"http://[::1]:8080\" --header \"X-Forwarded-For: &lt;iframe src=//malware.attack&gt;\"\n</code></pre> <pre><code>2022-05-23T22:24:50.519540Z  INFO static_web_server::handler: incoming request: method=GET uri=/\n</code></pre>"},{"location":"features/maintenance-mode/","title":"Maintenance Mode","text":"<p><code>SWS</code> provides a way to put a server into a maintenance mode. Allowing the server to respond with a custom HTTP status code and HTML content always by default.</p> <p>This is useful to allow the server to be taken offline without disrupting the service.</p> <p>The feature is disabled by default and can be controlled by the boolean <code>--maintenance-mode</code> option or the equivalent SERVER_MAINTENANCE_MODE env.</p>"},{"location":"features/maintenance-mode/#how-it-works","title":"How it works","text":"<p>When the feature is enabled, SWS will respond always with the specified (or default) status code and HTML content to every request ignoring all SWS features. Except the Health check, CORS and Basic Authentication features.</p>"},{"location":"features/maintenance-mode/#http-status-code","title":"HTTP Status Code","text":"<p>The <code>--maintenance-mode-status</code> or the equivalent SERVER_MAINTENANCE_MODE_STATUS env variable can be used to tell SWS to reply with a specific status code.</p> <p>When not specified, the server will reply with the <code>503 Service Unavailable</code> status.</p>"},{"location":"features/maintenance-mode/#html-page","title":"HTML Page","text":"<p>The <code>--maintenance-mode-file</code>  or the equivalent SERVER_MAINTENANCE_MODE_FILE env variable can be also used to customize the response content.</p> <p>The value should be an existing local HTML file path. When not provided a generic message will be displayed.</p> <p>Optional</p> <p>Remember that either <code>--maintenance-mode-status</code> and <code>--maintenance-mode-file</code> are optional and can be omitted as needed.</p> <p>Independent path</p> <p>The <code>--maintenance-mode-file</code> is an independent file path and not relative to the root.</p>"},{"location":"features/maintenance-mode/#example","title":"Example","text":"<p>For instance, the server will respond with a <code>503 Service Unavailable</code> status code and a custom message.</p> <pre><code>static-web-server -p 8787 -d ./public \\\n    --maintenance-mode \\\n    # optional status code, `503` by default\n    --maintenance-mode-status=503 \\\n    # optional HTML page, generic message by default\n    --maintenance-mode-file=\"./maintenance.html\"\n</code></pre>"},{"location":"features/man-pages-completions/","title":"Generated CLI documentation","text":"<p><code>SWS</code> can generate documentation for its command-line interface through man pages and shell completions.</p>"},{"location":"features/man-pages-completions/#completions","title":"Completions","text":"<p>You can generate completions for these shells and completion engines:</p> <ul> <li>bash</li> <li>carapace</li> <li>elvish</li> <li>fig</li> <li>fish</li> <li>nushell</li> <li>powershell</li> <li>zsh</li> </ul> <p>By typing the following command, all completions will be exported to a specific directory path:</p> <pre><code>static-web-server generate --completions /my-completions-dir\n</code></pre>"},{"location":"features/man-pages-completions/#man-pages","title":"Man Pages","text":"<p>You can also generate man pages and export them to a specific directory path:</p> <pre><code>static-web-server generate --man-pages /my-man-pages-dir\n</code></pre> <p>Additionally, if you want both to be generated then just type:</p> <pre><code>static-web-server generate ./my-cli-docs-dir\n</code></pre>"},{"location":"features/multiple-index-files/","title":"Multiple index files","text":"<p><code>SWS</code> allows to provide a list of files that will be used as an index for requests ending with the slash character (\u2018/\u2019).</p> <p>Notes</p> <ul> <li>Files are checked in the specified order from left to right.</li> <li>The option value can be a single index or comma-separated when multiple values.</li> <li>The default value is <code>index.html</code>.</li> </ul> <p>This feature is disabled by default and can be controlled by the string list <code>--index-files</code> option or the equivalent SERVER_INDEX_FILES env.</p> <p>Here is an example:</p> <pre><code>static-web-server -p 8787 -d ./public \\\n    --index-files=\"index.html, index.htm, default.html\"\n</code></pre>"},{"location":"features/security-headers/","title":"Security Headers","text":"<p><code>SWS</code> provides several security headers support.</p> <p>When the HTTP/2 feature is activated security headers are enabled automatically.</p> <p>This feature is disabled by default on HTTP/1 and can be controlled by the boolean <code>--security-headers</code> option or the equivalent SERVER_SECURITY_HEADERS env.</p> <p>Customize HTTP headers</p> <p>If you want to customize HTTP headers on demand then have a look at the Custom HTTP Headers section.</p>"},{"location":"features/security-headers/#headers-included","title":"Headers included","text":"<p>The following headers are included by default.</p> <ul> <li><code>Strict-Transport-Security: max-age=63072000; includeSubDomains; preload\" (2 years max-age)</code></li> <li><code>X-Frame-Options: DENY</code></li> <li><code>X-Content-Type-Options: nosniff</code></li> <li><code>Content-Security-Policy: frame-ancestors</code></li> </ul>"},{"location":"features/trailing-slash-redirect/","title":"Trailing Slash Redirect","text":"<p><code>SWS</code> provides automatic trailing slash redirect support for directory requests.</p> <p>This feature is enabled by default and can be controlled by the boolean <code>--redirect-trailing-slash</code> option or the equivalent SERVER_REDIRECT_TRAILING_SLASH env.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    --redirect-trailing-slash true\n</code></pre>"},{"location":"features/url-redirects/","title":"URL Redirects","text":"<p>SWS provides the ability to redirect request URLs with Glob pattern-matching support.</p> <p>URI redirects are particularly useful with pattern matching (globs). Use them for example to prevent broken links if you've moved a page or to shorten URLs.</p>"},{"location":"features/url-redirects/#structure","title":"Structure","text":"<p>The URL redirect rules should be defined mainly as an Array of Tables.</p> <p>Each table entry should have the following key/value pairs:</p> <ul> <li><code>host</code>: optional key containing a string hostname to be matched against the incoming host URI.</li> <li><code>source</code>: key containing a string glob pattern.</li> <li><code>destination</code>: local file path or a full URL with optional replacements (placeholders).</li> <li><code>kind</code>: optional number containing the HTTP response code (redirection).</li> </ul> <p>Note</p> <p>The incoming request(s) will reach the <code>destination</code> only if the request(s) URI matches the <code>source</code> pattern.</p>"},{"location":"features/url-redirects/#host","title":"Host","text":"<p>Optional <code>host</code> redirect entry to be matched against the incoming host URI. If a <code>host</code> redirect setting is specified then SWS will attempt to match the value against the incoming URI host (request), applying the required redirect entry or ignoring it otherwise.</p> <p>www to non-www redirects</p> <p>The host entry allows for instance to perform www to non-www redirects or vice versa (see example below).</p>"},{"location":"features/url-redirects/#source","title":"Source","text":"<p>The source is a Glob pattern that should match against the URI that is requesting a resource file.</p> <p>The glob pattern functionality is powered by the globset crate which supports Standard Unix-style glob syntax.</p> <p>Glob pattern syntax</p> <p>For more details about the Glob pattern syntax check out https://docs.rs/globset/latest/globset/#syntax</p> <p>Matching of path separator in <code>*</code></p> <p>Up to version <code>2.33.1</code> the wildcard <code>*</code> was matching the path separator. For example, <code>/{*}/{*}/</code> matched <code>/assets/images/logo/</code>.</p> <p>In later versions, the default has changed such that <code>*</code> does not match the path separator.</p>"},{"location":"features/url-redirects/#destination","title":"Destination","text":"<p>The value can be either a local file path that maps to an existing file on the system or an external URL. It could look like <code>/some/directory/file.html</code>. It is worth noting that the <code>/</code> at the beginning indicates the server's root directory.</p>"},{"location":"features/url-redirects/#replacements","title":"Replacements","text":"<p>Additionally, a <code>destination</code> supports replacements for every Glob pattern group that matches against the <code>source</code>. The replacement order starts from <code>0</code> to <code>n</code> and is defined with a dollar sign followed by an index (Glob pattern group occurrence).</p> <p>Group your Glob patterns</p> <p>When using replacements, also group your Glob pattern by surrounding them with curly braces so every group should map to its corresponding replacement. For example: <code>source = \"**/{*}.{jpg,jpeg,svg}\"</code></p>"},{"location":"features/url-redirects/#kind","title":"Kind","text":"<p>It is a number that indicates the HTTP response code (redirect). The values can be:</p> <ul> <li><code>301</code> for \"Moved Permanently\"</li> <li><code>302</code> for \"Found\" (Temporary Redirect)</li> </ul>"},{"location":"features/url-redirects/#examples","title":"Examples","text":"<pre><code>[advanced]\n\n### URL Redirects\n\n# a. Simple route redirect example (existing file)\n[[advanced.redirects]]\nsource = \"**/*.{jpg,jpeg}\"\ndestination = \"/images/generic1.png\"\nkind = 301\n\n# b. Simple route redirect example (external URL)\n[[advanced.redirects]]\nsource = \"/index.html\"\ndestination = \"https://static-web-server.net\"\nkind = 302\n\n# c. Simple route redirect example with destination replacements\n[[advanced.redirects]]\n## Note that we're using curly braces to group the `*` wildcard.\n## See https://docs.rs/globset/latest/globset/#syntax\nsource = \"**/{*}.{jpg,jpeg,svg}\"\n## For example, the destination will result in `http://localhost/assets/abcdef.jpeg`\ndestination = \"http://localhost/assets/$1.$2\"\nkind = 301\n\n# d. Simple route redirect using the `host` option\n# to perform www to non-www redirection.\n[[advanced.redirects]]\nhost = \"www.domain.com\"\nsource = \"/{*}\"\ndestination = \"https://domain.com/$1\"\nkind = 301\n</code></pre> <p>If you request something like:</p> <pre><code>curl -I http://localhost:4433/abcdef.jpeg\n</code></pre> <p>Then the server logs should look something like this:</p> <pre><code>2023-07-11T21:11:22.217358Z  INFO static_web_server::handler: incoming request: method=HEAD uri=/abcdef.jpeg\n2023-07-11T21:11:22.217974Z DEBUG static_web_server::handler: url redirects glob pattern: [\"$0\", \"$1\", \"$2\"]\n2023-07-11T21:11:22.217992Z DEBUG static_web_server::handler: url redirects regex equivalent: (?-u)^(?:/?|.*/)(?:[^/]*)\\.(?:svg|jpeg|jpg)$\n2023-07-11T21:11:22.218002Z DEBUG static_web_server::handler: url redirects glob pattern captures: [\"abcdef.jpeg\", \"abcdef\", \"jpeg\"]\n2023-07-11T21:11:22.218076Z DEBUG static_web_server::handler: url redirects glob pattern destination: \"http://localhost/assets/$1.$2\"\n2023-07-11T21:11:22.218712Z DEBUG static_web_server::handler: url redirects glob pattern destination replaced: \"http://localhost/assets/abcdef.jpeg\"\n2023-07-11T21:11:22.218739Z TRACE static_web_server::handler: uri matches redirects glob pattern, redirecting with status '301 Moved Permanently'\n...\n</code></pre>"},{"location":"features/url-rewrites/","title":"URL Rewrites","text":"<p>SWS provides the ability to rewrite request URLs (routes) with Glob pattern-matching support.</p> <p>URI rewrites are particularly useful with pattern matching (globs), as the server can accept any URL that matches the pattern and let the client-side code decide what to display.</p>"},{"location":"features/url-rewrites/#structure","title":"Structure","text":"<p>URL rewrite rules should be defined mainly as an Array of Tables.</p> <p>Each table entry should have two key/value pairs:</p> <ul> <li><code>source</code>: key containing a string glob pattern.</li> <li><code>destination</code>: file path with optional replacements (placeholders).</li> <li><code>redirect</code>: optional number containing the HTTP response code (redirection).</li> </ul> <p>Note</p> <p>The incoming request(s) will reach the <code>destination</code> only if the request(s) URI matches the <code>source</code> pattern.</p>"},{"location":"features/url-rewrites/#source","title":"Source","text":"<p>It's a Glob pattern that should match against the URI that is requesting a resource file.</p> <p>The glob pattern functionality is powered by the globset crate which supports Standard Unix-style glob syntax.</p> <p>Glob pattern syntax</p> <p>For more details about the Glob pattern syntax check out https://docs.rs/globset/latest/globset/#syntax</p> <p>Matching of path separator in <code>*</code></p> <p>Up to version <code>2.33.1</code> the wildcard <code>*</code> was matching the path separator. For example, <code>/{*}/{*}/</code> matched <code>/assets/images/logo/</code>.</p> <p>In later versions, the default has changed such that <code>*</code> does not match the path separator.</p>"},{"location":"features/url-rewrites/#destination","title":"Destination","text":"<p>The value should be a relative or absolute URL. A relative URL could look like <code>/some/directory/file.html</code>. An absolute URL can be <code>https://external.example.com/</code> for example.</p>"},{"location":"features/url-rewrites/#replacements","title":"Replacements","text":"<p>Additionally, a <code>destination</code> supports replacements for every Glob pattern group that matches against the <code>source</code>.</p> <p>Replacements order start from <code>0</code> to <code>n</code> and are defined with a dollar sign followed by an index (Glob pattern group occurrence).</p> <p>Group your Glob patterns</p> <p>When using replacements, also group your Glob pattern by surrounding them with curly braces so every group should map to its corresponding replacement. For example: <code>source = \"**/{*}.{png,gif}\"</code></p>"},{"location":"features/url-rewrites/#destination-processing","title":"Destination processing","text":"<p>How destination is processed depends on whether the <code>redirect</code> key (see below) is present. If it is present, SWS will perform an external redirect. It will send a redirect response to the client, and the browser will usually proceed to the destination. In case of a relative URL, it will be another page on the same server. An absolute URL can result in navigation to another server.</p> <p>Without a <code>redirect</code> key, SWS will perform an internal redirect. It will attempt to retrieve the file denoted by the destination and send it to the client. While it is possible to specify an absolute URL here as well, it will always be processed by the same SWS instance. It will result by the request being mapped to a different virtual host however if a matching virtual host is present.</p>"},{"location":"features/url-rewrites/#different-roots-within-the-same-virtual-host","title":"Different roots within the same virtual host","text":"<p>Normally, different root directories are only possible with different virtual hosts. Rewrites however allow exposing another root in a subdirectory for example. For that, you add an internal virtual host that isn't normally visible from outside, e.g. <code>internal.local</code>. You then rewrite the requests to the subdirectory to the internal virtual host. For example:</p> <pre><code>[general]\nroot = \"/usr/srv/www\"\n\n[advanced]\n\n[[advanced.rewrites]]\nsource = \"/test/{**}\"\ndestination = \"http://internal.local/test/$1\"\n\n[[advanced.virtual-hosts]]\nhost = \"internal.local\"\nroot = \"/usr/srv/alternative-root\"\n</code></pre> <p>A request to <code>/index.html</code> will be mapped to <code>/usr/srv/www/index.html</code>, yet <code>/test/hi.txt</code> will be mapped to the file <code>/usr/srv/alternative-root/test/hi.txt</code>.</p> <p>This approach has two caveats:</p> <ol> <li>When SWS produces redirects (e.g. redirecting <code>http://internal.local/test/subdir</code> to <code>http://internal.local/test/subdir/</code>), it isn't aware of rewrites. Unless the path part of the URL is identical before and after rewrite (like in the example above), this will result in broken redirects.</li> <li>While the <code>internal.local</code> virtual host isn't normally accessed directly, this doesn't mean that it isn't possible for someone knowing (or guessing) its name. You should consider all files under the virtual host's root as public. Don't put any secrets in it even if these aren't accessible via rewrites.</li> </ol>"},{"location":"features/url-rewrites/#redirect","title":"Redirect","text":"<p>An optional number that indicates the HTTP response code (redirect). The values can be:</p> <ul> <li><code>301</code> for \"Moved Permanently\"</li> <li><code>302</code> for \"Found\" (Temporary Redirect)</li> </ul>"},{"location":"features/url-rewrites/#examples","title":"Examples","text":"<pre><code>[advanced]\n\n### URL Rewrites\n\n# a. Simple route rewrite example\n[[advanced.rewrites]]\nsource = \"**/*.{png,ico,gif}\"\ndestination = \"/assets/generic1.png\"\n\n# b. Route rewrite example with redirection\n[[advanced.rewrites]]\nsource = \"**/*.{jpg,jpeg}\"\ndestination = \"/images/generic2.png\"\n## NOTE: `redirect` can be omitted too\nredirect = 301\n\n# c. Route rewrite example with destination replacements\n[[advanced.rewrites]]\n## Note that we're using curly braces to group the `*` wildcard.\n## See https://docs.rs/globset/latest/globset/#syntax\nsource = \"**/{*}.{png,gif}\"\n## For example, the destination will result in `/assets/abcdef.png`\ndestination = \"/assets/$1.$2\"\n</code></pre> <p>If you request something like:</p> <pre><code>curl -I http://localhost/abcdef.png\n</code></pre> <p>Then the server logs should look something like this:</p> <pre><code>2023-07-08T20:31:36.606035Z  INFO static_web_server::handler: incoming request: method=HEAD uri=/abcdef.png\n2023-07-08T20:31:36.608439Z DEBUG static_web_server::handler: url rewrites glob patterns: [\"$0\", \"$1\", \"$2\"]\n2023-07-08T20:31:36.608491Z DEBUG static_web_server::handler: url rewrites regex equivalent: (?-u)^(?:/?|.*/)(?:[^/]*)\\.(?:gif|png)$\n2023-07-08T20:31:36.608525Z DEBUG static_web_server::handler: url rewrites glob pattern captures: [\"abcdef.png\", \"abcdef\", \"png\"]\n2023-07-08T20:31:36.608561Z DEBUG static_web_server::handler: url rewrites glob pattern destination: \"/assets/$1.$2\"\n2023-07-08T20:31:36.609655Z DEBUG static_web_server::handler: url rewrites glob patterns destination replaced: \"/assets/abcdef.png\"\n2023-07-08T20:31:36.609735Z TRACE static_web_server::static_files: dir: base=\"public\", route=\"assets/abcdef.png\"\n...\n</code></pre>"},{"location":"features/virtual-hosting/","title":"Virtual Hosting","text":"<p>SWS provides rudimentary support for name-based virtual hosting. This allows you to serve files from different root directories depending on the \"Host\" header of the request, with all other settings staying the same.</p> <p>All other settings are the same!</p> <p>Each virtual host has to have all the same settings (aside from <code>root</code>). If using TLS, your certificates will have to cover all virtual host names as Subject Alternative Names (SANs). Also, beware of other conflicting settings like redirects and rewrites. If you find yourself needing different settings for different virtual hosts, it is recommended to run multiple instances of SWS.</p> <p>Virtual hosting can be useful for serving more than one static website from the same SWS instance, if it's not otherwise feasible to run multiple instances of SWS. Browsers will automatically send a <code>Host</code> header which matches the hostname in the URL bar, which is how HTTP servers are able to tell which \"virtual\" host that the client is accessing.</p> <p>By default, SWS will always serve files from the main <code>root</code> directory. If you configure virtual hosting and the \"Host\" header matches, SWS will instead look for files in an alternate root directory you specify.</p>"},{"location":"features/virtual-hosting/#examples","title":"Examples","text":"<pre><code># By default, all requests are served from here\nroot = \"/var/www/html\"\n\n[advanced]\n\n[[advanced.virtual-hosts]]\n# But if the \"Host\" header matches this...\nhost = \"sales.example.com\"\n# ...then files will be served from here instead\nroot = \"/var/sales/html\"\n\n[[advanced.virtual-hosts]]\nhost = \"blog.example.com\"\nroot = \"/var/blog/html\"\n</code></pre>"},{"location":"features/webassembly/","title":"WebAssembly","text":"<p>SWS can run in a WebAssembly context.</p> <p>Wasm/Wasix targets are not officially supported by SWS yet</p> <p>We do not officially support Wasm or Wasix targets yet. But SWS project will eventually support Wasix as a target in a not remote future. In the meantime, Wasmer folks made it possible to run SWS via Wasix today via a series of patches.</p>"},{"location":"features/webassembly/#wasix","title":"Wasix","text":"<p>You can run SWS using The Wasmer Runtime with Wasix. See the wasmer/static-web-server package.</p> <p>To run SWS, make sure to install Wasmer first and then enable its <code>net</code> and <code>threads</code> features as well as map your host directory via the <code>mapdir</code> option before starting the server.</p> <p>Here is an example.</p> <pre><code>wasmer run wasmer/static-web-server \\\n    --net --enable-threads --mapdir /public:/my/host/dir -- --port 8787\n</code></pre> <p>See The WASIX with Axum Tutorial for more details.</p>"},{"location":"features/windows-service/","title":"Windows Service","text":"<p><code>SWS</code> can be also executed in a Windows Service context. Therefore it also provides a subcommand to install SWS as a Windows Service.</p> <p>This feature is disabled by default and can be controlled by the boolean <code>-s, --windows-service</code> option or the equivalent SERVER_WINDOWS_SERVICE env.</p> <p></p> <p>Static Web Server running as a Windows Service and displayed by 'services.msc' application.</p>"},{"location":"features/windows-service/#important-notes","title":"Important Notes","text":"<ul> <li>This is an obvious Windows platform-specific feature.</li> <li>The SWS Windows Service option (<code>windows-service</code>) doesn't create a Windows Service per se. It just tells SWS to run in a Windows Service context. So it's necessary to install the SWS Windows Service first.</li> <li>Enabling the <code>windows-service</code> option via the configuration file is unnecessary if you use the install subcommand to create the service since it already enables it during the service installation.</li> <li>However, you can enable the <code>windows-service</code> option for example if you plan to create your own Windows Service and use SWS with it.</li> </ul>"},{"location":"features/windows-service/#service-privileges","title":"Service privileges","text":"<p>To either install or uninstall the SWS Windows service requires administrator privileges, so make sure to open the terminal application as administrator or give your Powershell session enough privileges otherwise you will get an <code>\"Access is denied\"</code> error.</p> <p>We recommend a Powershell session with administrator privileges.</p>"},{"location":"features/windows-service/#windows-firewall","title":"Windows Firewall","text":"<p>You can serve content with SWS in a Windows network. However, if you face issues running SWS it could be due to missing firewall configuration. So you probably have to define an <code>inbound rule</code> to allow inbound network traffic on a specified TCP port of your choice.</p> <p>Follow the steps below to adjust your firewall:</p> <ol> <li>Configure an Inbound Port Rule in your Windows firewall so clients can reach the server's port.</li> <li>In your SWS config file, use the server IP as a host or a non-routable address like <code>0.0.0.0</code> if you prefer.</li> <li>Create a Windows Service following https://static-web-server.net/features/windows-service/ and start it.</li> <li>Finally, restart the service to apply the changes.</li> </ol> <p>Note that the steps above are general and you have to adjust your firewall rule(s) according to your needs.</p>"},{"location":"features/windows-service/#install-the-service","title":"Install the service","text":"<p>To install the SWS service use the <code>install</code> command along with a configuration file for further SWS options customization.</p> <p>Make sure to provide a configuration file to run SWS service properly. In particular, configure the server <code>address</code>, <code>port</code> and <code>root</code> directory accordingly. If not then the service might not start.</p> <p>The following command will create the SWS service called <code>static-web-server</code> with a \"<code>Static Web Server</code>\" display name.</p> <pre><code>static-web-server.exe -w C:\\Users\\MyUser\\config.toml install\n# Windows Service (static-web-server) is installed successfully!\n# Start the service typing: sc.exe start \"static-web-server\" (it requires administrator privileges) or using the 'services.msc' application.\n</code></pre>"},{"location":"features/windows-service/#interact-with-the-service","title":"Interact with the service","text":"<p>SWS doesn't provide a way to interact with Windows services directly. Instead, use the Windows built-in tools to interact with the SWS service once created.</p> <p>For that purpose, you can use either the Windows sc.exe or the services.msc application.</p> <p>For example, using <code>sc.exe</code> you can show the SWS service configuration used once installed.</p> <pre><code>sc.exe qc \"static-web-server\"\n# [SC] QueryServiceConfig SUCCESS\n\n# SERVICE_NAME: static-web-server\n#         TYPE               : 10  WIN32_OWN_PROCESS\n#         START_TYPE         : 3   DEMAND_START\n#         ERROR_CONTROL      : 1   NORMAL\n#         BINARY_PATH_NAME   : C:\\Users\\MyUser\\static-web-server.exe \n#                                   --windows-service=true \n#                                   --config-file=C:\\Users\\MyUser\\config.toml\n#         LOAD_ORDER_GROUP   :\n#         TAG                : 0\n#         DISPLAY_NAME       : Static Web Server\n#         DEPENDENCIES       :\n#         SERVICE_START_NAME : LocalSystem\n</code></pre> <p>Remember that alternatively, you can also use the <code>services.msc</code> application if you prefer GUI service control.</p>"},{"location":"features/windows-service/#start","title":"Start","text":"<p>To start the service use the following <code>sc.exe</code> command.</p> <pre><code>sc.exe start \"static-web-server\"\n# SERVICE_NAME: static-web-server\n#     TYPE               : 10  WIN32_OWN_PROCESS\n#     STATE              : 2  START_PENDING\n#                             (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n#     WIN32_EXIT_CODE    : 0  (0x0)\n#     SERVICE_EXIT_CODE  : 0  (0x0)\n#     CHECKPOINT         : 0x0\n#     WAIT_HINT          : 0x7d0\n#     PID                : 3068\n#     FLAGS              :\n</code></pre>"},{"location":"features/windows-service/#status","title":"Status","text":"<p>To show the service status use the following <code>sc.exe</code> command.</p> <pre><code>sc.exe query \"static-web-server\"\n# SERVICE_NAME: static-web-server\n#     TYPE               : 10  WIN32_OWN_PROCESS\n#     STATE              : 4  RUNNING\n#                             (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n#     WIN32_EXIT_CODE    : 0  (0x0)\n#     SERVICE_EXIT_CODE  : 0  (0x0)\n#     CHECKPOINT         : 0x0\n#     WAIT_HINT          : 0x0\n</code></pre>"},{"location":"features/windows-service/#stop","title":"Stop","text":"<p>To stop the service use the following <code>sc.exe</code> command.</p> <pre><code>sc.exe stop \"static-web-server\"\n# SERVICE_NAME: static-web-server\n#         TYPE               : 10  WIN32_OWN_PROCESS\n#         STATE              : 3  STOP_PENDING\n#                                 (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n#         WIN32_EXIT_CODE    : 0  (0x0)\n#         SERVICE_EXIT_CODE  : 0  (0x0)\n#         CHECKPOINT         : 0x2\n#         WAIT_HINT          : 0xbb8\n</code></pre> <p>After stopping the service you can also show its status.</p> <pre><code>sc.exe query \"static-web-server\"\n# SERVICE_NAME: static-web-server\n#         TYPE               : 10  WIN32_OWN_PROCESS\n#         STATE              : 1  STOPPED\n#         WIN32_EXIT_CODE    : 0  (0x0)\n#         SERVICE_EXIT_CODE  : 0  (0x0)\n#         CHECKPOINT         : 0x0\n#         WAIT_HINT          : 0x0\n</code></pre>"},{"location":"features/windows-service/#uninstall-the-service","title":"Uninstall the service","text":"<p>To uninstall the SWS service just use the <code>uninstall</code> command. Note that the service should be first stopped before uninstalling it.</p> <pre><code>static-web-server.exe uninstall\n# Windows Service (static-web-server) is uninstalled!\n</code></pre> <p>After uninstalling the service you can verify if removed.</p> <pre><code>sc.exe qc \"static-web-server\"\n# [SC] OpenService FAILED 1060:\n#\n# The specified service does not exist as an installed service.\n</code></pre>"},{"location":"features/worker-threads/","title":"Worker Threads Customization","text":"<p>SWS allows customizing the number of worker threads powered by the Tokio runtime.</p> <p>See Tokio <code>worker_threads</code> API.</p> <p>This feature can be controlled by the numeric <code>-n, --threads-multiplier</code> option or the equivalent SERVER_THREADS_MULTIPLIER env.</p>"},{"location":"features/worker-threads/#worker-threads-multiplier","title":"Worker threads multiplier","text":"<p>The value of <code>-n, --threads-multiplier</code> works as multiplier digits to determine the number of worker threads used by the server.</p> <p>Multiplying this input number by the number of system CPUs.</p> <p>The formula used is the following:</p> <p>worker threads = number of CPUs * n</p> <p>Where <code>n</code> is the input value of <code>-n, --threads-multiplier</code>.</p> <p>For example: If there are <code>4</code> available CPUs and the <code>--threads-multiplier</code> is <code>8</code> then the total of worker threads to use will be <code>32</code>.</p> <p>Tip</p> <p>When the <code>--threads-multiplier</code> input value is <code>0</code> or <code>1</code> then one thread per core is used (default value).</p> <p>WebAssembly</p> <p>We use <code>2</code> threads per core in Wasm and <code>1</code> in native environments by default.</p> <p>Warn</p> <p>The number of worker threads resulted should be a number between <code>1</code> and <code>32,768</code> though it is advised to keep this value on the smaller side. See Tokio <code>worker_threads</code> API for more details.</p> <p>Below is an example of how to adjust the number of worker threads.</p> <pre><code>static-web-server \\\n    --port 8787 \\\n    --root ./my-public-dir \\\n    # NOTE: \"8\" gets multiplied by the number of the available cores.\n    --threads-multiplier 8\n</code></pre>"}]}